# dinamico.py (vers√£o corrigida com mem√≥ria de opera√ß√£o)
import streamlit as st
import pandas as pd
import plotly.express as px
from enum import Enum
from dataclasses import dataclass
from typing import Dict, List, Tuple, Optional
import numpy as np
from datetime import datetime
import json

# =============================
# ENUMS E DATACLASSES
# =============================

class RedistributionStrategy(Enum):
    NO_GOAL = "Sem Gol"
    FAV_GOAL = "Gol do Favorito"
    AZA_GOAL = "Gol do Azar√£o"
    ZERO_ZERO = "0x0"
    ONE_ONE = "1x1"

class RiskProfile(Enum):
    CONSERVATIVE = "Conservador"
    MODERATE = "Moderado" 
    AGGRESSIVE = "Agressivo"

class OperationStatus(Enum):
    PENDING = "Pendente"
    EXECUTED = "Executada"
    CANCELLED = "Cancelada"

@dataclass
class HedgeBet:
    bet_type: str
    amount: float
    odds: float
    description: str
    market: str
    stake_percentage: float

@dataclass
class IAAnalysis:
    profile: RiskProfile
    recommended_strategy: str
    confidence: float
    key_insights: List[str]
    action_plan: List[str]
    expected_outcome: str

@dataclass
class OperationMemory:
    operation_id: str
    timestamp: datetime
    scenario: str
    profits_before: Dict[str, float]
    ia_analysis: IAAnalysis
    hedge_bets: List[HedgeBet]
    total_investment: float
    status: OperationStatus
    results: Optional[Dict] = None
    learning_notes: List[str] = None

# =============================
# SISTEMA DE MEM√ìRIA POR OPERA√á√ÉO
# =============================

class OperationMemoryManager:
    def __init__(self):
        self.operations: List[OperationMemory] = []
        self.current_operation_id = None
    
    def start_new_operation(self, scenario: str, profits: Dict[str, float], total_investment: float) -> str:
        """Inicia uma nova opera√ß√£o com ID √∫nico"""
        operation_id = f"OP_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.current_operation_id = operation_id
        
        new_operation = OperationMemory(
            operation_id=operation_id,
            timestamp=datetime.now(),
            scenario=scenario,
            profits_before=profits.copy(),
            ia_analysis=None,
            hedge_bets=[],
            total_investment=total_investment,
            status=OperationStatus.PENDING,
            learning_notes=[]
        )
        
        self.operations.append(new_operation)
        return operation_id
    
    def save_ia_analysis(self, analysis: IAAnalysis):
        """Salva an√°lise da IA para opera√ß√£o atual"""
        if self.current_operation_id:
            for op in self.operations:
                if op.operation_id == self.current_operation_id:
                    op.ia_analysis = analysis
                    break
    
    def save_hedge_bets(self, hedge_bets: List[HedgeBet]):
        """Salva apostas de hedge para opera√ß√£o atual"""
        if self.current_operation_id:
            for op in self.operations:
                if op.operation_id == self.current_operation_id:
                    op.hedge_bets = hedge_bets
                    op.status = OperationStatus.EXECUTED
                    break
    
    def add_learning_note(self, note: str):
        """Adiciona nota de aprendizado para opera√ß√£o atual"""
        if self.current_operation_id:
            for op in self.operations:
                if op.operation_id == self.current_operation_id:
                    op.learning_notes.append(f"{datetime.now().strftime('%H:%M:%S')}: {note}")
                    break
    
    def get_operation_history(self) -> List[OperationMemory]:
        """Retorna hist√≥rico de opera√ß√µes"""
        return sorted(self.operations, key=lambda x: x.timestamp, reverse=True)
    
    def get_operation_by_id(self, operation_id: str) -> Optional[OperationMemory]:
        """Busca opera√ß√£o por ID"""
        for op in self.operations:
            if op.operation_id == operation_id:
                return op
        return None
    
    def get_last_operation(self) -> Optional[OperationMemory]:
        """Retorna a √∫ltima opera√ß√£o executada"""
        if self.operations:
            return sorted(self.operations, key=lambda x: x.timestamp, reverse=True)[0]
        return None

# =============================
# ANALISADOR DE IA INSTRUTIVO
# =============================

class IAAnalyzer:
    def __init__(self):
        self.risk_profiles = {
            RiskProfile.CONSERVATIVE: {"max_risk": 0.2, "protection_focus": 0.7},
            RiskProfile.MODERATE: {"max_risk": 0.3, "protection_focus": 0.5},
            RiskProfile.AGGRESSIVE: {"max_risk": 0.4, "protection_focus": 0.3}
        }
    
    def analyze_current_situation(self, zero_profit: float, fav_profit: float, aza_profit: float, total_investment: float = 100) -> IAAnalysis:
        """Analisa a situa√ß√£o atual e gera INSTRU√á√ïES CLARAS de aplica√ß√£o"""
        
        profits = [zero_profit, fav_profit, aza_profit]
        max_profit = max(profits)
        min_profit = min(profits)
        volatility = abs(max_profit - min_profit)
        
        # Determinar perfil baseado na volatilidade
        if volatility < 5:
            profile = RiskProfile.CONSERVATIVE
            strategy = "Prote√ß√£o M√°xima"
            insights = ["Baixa volatilidade entre cen√°rios", "Risco controlado", "Foco em prote√ß√£o"]
            action_plan = self._generate_conservative_actions(zero_profit, fav_profit, aza_profit, total_investment)
            expected_outcome = "Prote√ß√£o de 70% do lucro m√°ximo com risco m√≠nimo"
            
        elif volatility < 15:
            profile = RiskProfile.MODERATE
            strategy = "Hedge Balanceado"
            insights = ["Volatilidade moderada", "Oportunidade de hedge equilibrado", "Risco calculado"]
            action_plan = self._generate_moderate_actions(zero_profit, fav_profit, aza_profit, total_investment)
            expected_outcome = "Balanceamento entre prote√ß√£o e oportunidade (50/50)"
            
        else:
            profile = RiskProfile.AGGRESSIVE
            strategy = "Hedge Oportunista"
            insights = ["Alta volatilidade", "Potencial para ganhos significativos", "Risco elevado"]
            action_plan = self._generate_aggressive_actions(zero_profit, fav_profit, aza_profit, total_investment)
            expected_outcome = "Busca por maximiza√ß√£o de lucros com aceita√ß√£o de risco"
        
        # Calcular confian√ßa
        positive_profits = sum(1 for p in profits if p > 0)
        confidence = 0.5 + (positive_profits * 0.15)
        
        return IAAnalysis(
            profile=profile,
            recommended_strategy=strategy,
            confidence=min(0.95, confidence),
            key_insights=insights,
            action_plan=action_plan,
            expected_outcome=expected_outcome
        )
    
    def _generate_conservative_actions(self, zero_profit: float, fav_profit: float, aza_profit: float, total_investment: float) -> List[str]:
        """Gera instru√ß√µes espec√≠ficas para perfil conservador"""
        max_profit = max(zero_profit, fav_profit, aza_profit)
        actions = [
            f"üéØ OBJETIVO: Proteger {max_profit:.2f} de lucro m√°ximo",
            f"üí∞ INVESTIR: M√°ximo 20% do bankroll (R$ {total_investment * 0.2:.2f})",
            f"üõ°Ô∏è ESTRAT√âGIA: 70% em prote√ß√£o, 30% em oportunidades seguras",
            f"‚è∞ TIMING: Aplicar hedge imediatamente",
            f"üìä META: Garantir pelo menos 70% do lucro m√°ximo ({max_profit * 0.7:.2f})",
            f"üö® STOP: N√£o exceder R$ {total_investment * 0.25:.2f} em hedge"
        ]
        return actions
    
    def _generate_moderate_actions(self, zero_profit: float, fav_profit: float, aza_profit: float, total_investment: float) -> List[str]:
        """Gera instru√ß√µes espec√≠ficas para perfil moderado"""
        max_profit = max(zero_profit, fav_profit, aza_profit)
        actions = [
            f"üéØ OBJETIVO: Balancear prote√ß√£o e oportunidade",
            f"üí∞ INVESTIR: At√© 30% do bankroll (R$ {total_investment * 0.3:.2f})",
            f"‚öñÔ∏è ESTRAT√âGIA: 50% prote√ß√£o, 50% oportunidades",
            f"‚è∞ TIMING: Aplicar hedge nos pr√≥ximos 10-15 minutos",
            f"üìä META: Lucro l√≠quido m√≠nimo de {max_profit * 0.5:.2f}",
            f"üö® STOP: Reavaliar se perdas potenciais > R$ {total_investment * 0.15:.2f}"
        ]
        return actions
    
    def _generate_aggressive_actions(self, zero_profit: float, fav_profit: float, aza_profit: float, total_investment: float) -> List[str]:
        """Gera instru√ß√µes espec√≠ficas para perfil agressivo"""
        max_profit = max(zero_profit, fav_profit, aza_profit)
        actions = [
            f"üéØ OBJETIVO: Maximizar lucro aproveitando volatilidade",
            f"üí∞ INVESTIR: At√© 40% do bankroll (R$ {total_investment * 0.4:.2f})",
            f"üé≤ ESTRAT√âGIA: 30% prote√ß√£o, 70% oportunidades agressivas",
            f"‚è∞ TIMING: Aplicar hedge durante picos de odds",
            f"üìä META: Potencial de lucro > {max_profit * 1.2:.2f}",
            f"üö® STOP: Limitar perda m√°xima em R$ {total_investment * 0.2:.2f}"
        ]
        return actions

# =============================
# GERENCIADOR DIN√ÇMICO INSTRUTIVO (CORRIGIDO)
# =============================

class DynamicHedgeManager:
    def __init__(self):
        self.current_hedge_bets: List[HedgeBet] = []
        self.applied_strategy = None
        self.ia_analyzer = IAAnalyzer()
        self.memory_manager = OperationMemoryManager()
    
    def apply_ia_strategy(self, zero_profit: float, fav_profit: float, aza_profit: float, odds_values: Dict, total_investment: float = 100) -> Tuple[float, List[HedgeBet], IAAnalysis]:
        """Aplica estrat√©gia da IA com instru√ß√µes claras"""
        
        # Iniciar nova opera√ß√£o na mem√≥ria
        profits = {"0x0": zero_profit, "1x1_FAV": fav_profit, "1x1_AZA": aza_profit}
        operation_id = self.memory_manager.start_new_operation(
            "Hedge Din√¢mico IA", profits, total_investment
        )
        
        # Obter an√°lise detalhada da IA
        ia_analysis = self.ia_analyzer.analyze_current_situation(zero_profit, fav_profit, aza_profit, total_investment)
        self.memory_manager.save_ia_analysis(ia_analysis)
        
        # Aplicar estrat√©gia baseada no perfil
        if ia_analysis.profile == RiskProfile.MODERATE:
            kept_profit, hedge_bets = self._apply_moderate_strategy(zero_profit, fav_profit, aza_profit, odds_values, total_investment, ia_analysis)
        elif ia_analysis.profile == RiskProfile.CONSERVATIVE:
            kept_profit, hedge_bets = self._apply_conservative_strategy(zero_profit, fav_profit, aza_profit, odds_values, total_investment)
        else:
            kept_profit, hedge_bets = self._apply_aggressive_strategy(zero_profit, fav_profit, aza_profit, odds_values, total_investment)
        
        # Salvar opera√ß√£o na mem√≥ria
        self.memory_manager.save_hedge_bets(hedge_bets)
        self.memory_manager.add_learning_note(f"Estrat√©gia {ia_analysis.profile.value} aplicada com sucesso")
        
        self.current_hedge_bets = hedge_bets
        self.applied_strategy = f"IA_{ia_analysis.profile.value}"
        
        return kept_profit, hedge_bets, ia_analysis
    
    def _apply_moderate_strategy(self, zero_profit: float, fav_profit: float, aza_profit: float, odds_values: Dict, total_investment: float, ia_analysis: IAAnalysis) -> Tuple[float, List[HedgeBet]]:
        """Estrat√©gia moderada com instru√ß√µes claras"""
        bets = []
        max_hedge = total_investment * 0.3
        
        # Aposta principal de prote√ß√£o
        protection_bet = HedgeBet(
            "Prote√ß√£o Balanceada",
            max_hedge * 0.5,
            odds_values.get("Dupla Chance 1X", 1.8),
            "Prote√ß√£o principal do investimento",
            "Dupla Chance",
            0.5
        )
        bets.append(protection_bet)
        
        # Aposta de oportunidade
        opportunity_bet = HedgeBet(
            "Oportunidade Moderada",
            max_hedge * 0.3,
            odds_values.get("Ambas Marcam - N√£o", 2.0),
            "Aproveitamento de valor moderado",
            "Ambas Marcam",
            0.3
        )
        bets.append(opportunity_bet)
        
        # Aposta de seguran√ßa
        safety_bet = HedgeBet(
            "Seguran√ßa Extra",
            max_hedge * 0.2,
            odds_values.get("N√£o Sair Gols", 3.0),
            "Prote√ß√£o adicional contra surpresas",
            "Clean Sheet",
            0.2
        )
        bets.append(safety_bet)
        
        kept_profit = max(zero_profit, fav_profit, aza_profit, 0) * 0.5
        return kept_profit, bets
    
    def _apply_conservative_strategy(self, zero_profit: float, fav_profit: float, aza_profit: float, odds_values: Dict, total_investment: float) -> Tuple[float, List[HedgeBet]]:
        """Estrat√©gia conservadora com foco absoluto em prote√ß√£o"""
        bets = []
        max_hedge = total_investment * 0.2
        
        # Aposta principal ultra-conservadora
        main_bet = HedgeBet(
            "Prote√ß√£o M√°xima",
            max_hedge * 0.7,
            odds_values.get("N√£o Sair Gols", 3.0),
            "Prote√ß√£o conservadora principal",
            "Clean Sheet",
            0.7
        )
        bets.append(main_bet)
        
        # Aposta secund√°ria
        secondary_bet = HedgeBet(
            "Backup Seguro",
            max_hedge * 0.3,
            odds_values.get("Dupla Chance 1X", 1.8),
            "Prote√ß√£o adicional conservadora",
            "Dupla Chance",
            0.3
        )
        bets.append(secondary_bet)
        
        kept_profit = max(zero_profit, fav_profit, aza_profit, 0) * 0.7
        return kept_profit, bets
    
    def _apply_aggressive_strategy(self, zero_profit: float, fav_profit: float, aza_profit: float, odds_values: Dict, total_investment: float) -> Tuple[float, List[HedgeBet]]:
        """Estrat√©gia agressiva focada em maximiza√ß√£o"""
        bets = []
        max_hedge = total_investment * 0.4
        
        # Aposta agressiva principal
        aggressive_bet = HedgeBet(
            "Oportunidade Agressiva",
            max_hedge * 0.6,
            odds_values.get("Mais de 2.5 Gols", 2.0),
            "Busca por maximiza√ß√£o agressiva",
            "Over 2.5",
            0.6
        )
        bets.append(aggressive_bet)
        
        # Aposta de medio prazo
        medium_bet = HedgeBet(
            "Valor M√©dio",
            max_hedge * 0.25,
            odds_values.get("Dupla Chance X2", 2.5),
            "Aproveitamento de valor m√©dio",
            "Dupla Chance",
            0.25
        )
        bets.append(medium_bet)
        
        # Pequena prote√ß√£o
        small_protection = HedgeBet(
            "Prote√ß√£o M√≠nima",
            max_hedge * 0.15,
            odds_values.get("N√£o Sair Gols", 3.0),
            "Prote√ß√£o b√°sica contra cat√°strofe",
            "Clean Sheet",
            0.15
        )
        bets.append(small_protection)
        
        kept_profit = max(zero_profit, fav_profit, aza_profit, 0) * 0.1
        return kept_profit, bets

    # üîß CORRE√á√ÉO: ADICIONAR M√âTODO get_strategy_summary QUE FALTAVA
    def get_strategy_summary(self) -> Dict:
        """Retorna resumo da estrat√©gia aplicada - M√âTODO CORRIGIDO"""
        if not self.current_hedge_bets:
            return {}
        
        total_invested = sum(b.amount for b in self.current_hedge_bets)
        expected_return = sum(b.amount * b.odds for b in self.current_hedge_bets)
        
        return {
            "strategy": self.applied_strategy or "Nenhuma",
            "total_hedge_investment": total_invested,
            "expected_return": expected_return,
            "expected_profit": expected_return - total_invested,
            "hedge_bets": [
                {
                    "type": b.bet_type,
                    "amount": b.amount,
                    "odds": b.odds,
                    "market": b.market,
                    "stake_percentage": b.stake_percentage,
                    "description": b.description
                }
                for b in self.current_hedge_bets
            ]
        }
    
    def get_current_operation_id(self) -> Optional[str]:
        """Retorna o ID da opera√ß√£o atual"""
        return self.memory_manager.current_operation_id
    
    def get_operation_summary(self, operation_id: str) -> Optional[Dict]:
        """Retorna resumo completo de uma opera√ß√£o espec√≠fica"""
        operation = self.memory_manager.get_operation_by_id(operation_id)
        if not operation:
            return None
        
        total_hedge_investment = sum(b.amount for b in operation.hedge_bets) if operation.hedge_bets else 0
        expected_return = sum(b.amount * b.odds for b in operation.hedge_bets) if operation.hedge_bets else 0
        
        return {
            "operation_id": operation.operation_id,
            "timestamp": operation.timestamp,
            "scenario": operation.scenario,
            "status": operation.status.value,
            "total_investment": operation.total_investment,
            "total_hedge_investment": total_hedge_investment,
            "expected_profit": expected_return - total_hedge_investment,
            "ia_analysis": {
                "profile": operation.ia_analysis.profile.value if operation.ia_analysis else "N/A",
                "strategy": operation.ia_analysis.recommended_strategy if operation.ia_analysis else "N/A",
                "confidence": operation.ia_analysis.confidence if operation.ia_analysis else 0,
                "action_plan": operation.ia_analysis.action_plan if operation.ia_analysis else []
            } if operation.ia_analysis else None,
            "hedge_bets": [
                {
                    "type": b.bet_type,
                    "amount": b.amount,
                    "odds": b.odds,
                    "market": b.market,
                    "description": b.description
                }
                for b in operation.hedge_bets
            ] if operation.hedge_bets else [],
            "learning_notes": operation.learning_notes or []
        }

# =============================
# INTERFACE INSTRUTIVA (CORRIGIDA)
# =============================

def init_hedge_state():
    if "hedge_manager" not in st.session_state:
        st.session_state.hedge_manager = DynamicHedgeManager()
    if "hedge_applied" not in st.session_state:
        st.session_state.hedge_applied = False
    if "current_operation_id" not in st.session_state:
        st.session_state.current_operation_id = None

def render_ia_instructions(ia_analysis: IAAnalysis):
    """Renderiza instru√ß√µes claras da IA"""
    st.markdown("### üéØ PLANO DE A√á√ÉO DA IA")
    
    # Container destacado com instru√ß√µes
    with st.container():
        st.success("**INSTRU√á√ïES DE APLICA√á√ÉO:**")
        
        for instruction in ia_analysis.action_plan:
            st.write(f"üìç {instruction}")
        
        st.info(f"**Resultado Esperado:** {ia_analysis.expected_outcome}")

def render_hedge_controls(zero_profit: float, fav_profit: float, aza_profit: float, odds_values: Dict):
    st.subheader("üß† Controle Din√¢mico com IA Instrutiva")
    
    # M√©tricas principais
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Lucro 0x0", f"R$ {zero_profit:.2f}", delta="Positivo" if zero_profit > 0 else "Negativo")
    with col2:
        st.metric("Lucro 1x1 FAV", f"R$ {fav_profit:.2f}", delta="Positivo" if fav_profit > 0 else "Negativo")
    with col3:
        st.metric("Lucro 1x1 AZA", f"R$ {aza_profit:.2f}", delta="Positivo" if aza_profit > 0 else "Negativo")

    # Calcular total investido
    total_investment = abs(zero_profit) + abs(fav_profit) + abs(aza_profit)
    
    # An√°lise da IA
    st.markdown("### ü§ñ AN√ÅLISE INTELIGENTE DA IA")
    
    ia_analyzer = IAAnalyzer()
    analysis = ia_analyzer.analyze_current_situation(zero_profit, fav_profit, aza_profit, total_investment)
    
    # Exibir an√°lise
    col1, col2 = st.columns(2)
    with col1:
        st.info(f"**Perfil de Risco:** {analysis.profile.value}")
        st.info(f"**Estrat√©gia Recomendada:** {analysis.recommended_strategy}")
    with col2:
        st.info(f"**N√≠vel de Confian√ßa:** {analysis.confidence:.0%}")
        st.info(f"**Investimento Total:** R$ {total_investment:.2f}")
    
    # Insights da IA
    with st.expander("üîç Insights Detalhados da IA"):
        for insight in analysis.key_insights:
            st.write(f"‚Ä¢ {insight}")

    # INSTRU√á√ïES CLARAS DE APLICA√á√ÉO
    render_ia_instructions(analysis)

    # Configura√ß√£o de Odds
    st.markdown("### ‚öôÔ∏è CONFIGURA√á√ÉO DE MERCADOS")
    
    default_odds = {
        "N√£o Sair Gols": 3.0,
        "Dupla Chance 1X": 1.8,
        "Dupla Chance X2": 2.5,
        "Ambas Marcam - N√£o": 2.0,
        "Mais de 2.5 Gols": 2.0
    }
    
    final_odds = odds_values.copy() if odds_values else {}
    for bet_type, default_odd in default_odds.items():
        if bet_type not in final_odds:
            final_odds[bet_type] = st.number_input(
                f"Odd para {bet_type}", 
                value=default_odd, 
                min_value=1.1, 
                max_value=10.0, 
                step=0.1,
                key=f"odd_{bet_type}"
            )

    # BOT√ÉO DE APLICA√á√ÉO COM FEEDBACK CLARO
    st.markdown("### üöÄ EXECUTAR ESTRAT√âGIA")
    
    if st.button("‚úÖ APLICAR ESTRAT√âGIA DA IA", type="primary", use_container_width=True):
        with st.spinner("Executando an√°lise e aplicando estrat√©gia..."):
            try:
                kept_profit, hedge_bets, ia_analysis = st.session_state.hedge_manager.apply_ia_strategy(
                    zero_profit, fav_profit, aza_profit, final_odds, total_investment
                )
                
                st.session_state.hedge_applied = True
                st.session_state.current_operation_id = st.session_state.hedge_manager.get_current_operation_id()
                
                # FEEDBACK DETALHADO DA APLICA√á√ÉO
                st.success("üéâ **ESTRAT√âGIA APLICADA COM SUCESSO!**")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Lucro Garantido", f"R$ {kept_profit:.2f}")
                with col2:
                    st.metric("Total Apostas", f"R$ {sum(b.amount for b in hedge_bets):.2f}")
                with col3:
                    st.metric("Opera√ß√£o ID", st.session_state.current_operation_id)
                
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå Erro na aplica√ß√£o: {e}")

def render_hedge_results():
    if not st.session_state.hedge_applied:
        return

    st.subheader("üìä RESULTADOS DA OPERA√á√ÉO")
    
    # Obter opera√ß√£o atual
    current_op_id = st.session_state.current_operation_id
    if not current_op_id:
        st.info("Nenhuma opera√ß√£o ativa")
        return
        
    operation_summary = st.session_state.hedge_manager.get_operation_summary(current_op_id)
    
    if not operation_summary:
        st.info("Opera√ß√£o n√£o encontrada")
        return

    # Detalhes da opera√ß√£o
    st.markdown(f"**Opera√ß√£o:** {operation_summary['operation_id']} | **Status:** {operation_summary['status']}")
    st.markdown(f"**In√≠cio:** {operation_summary['timestamp'].strftime('%d/%m/%Y %H:%M:%S')}")

    # Resumo da estrat√©gia - AGORA FUNCIONANDO
    summary = st.session_state.hedge_manager.get_strategy_summary()
    
    if summary:
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Estrat√©gia", summary['strategy'])
        with col2:
            st.metric("Total Investido", f"R$ {summary['total_hedge_investment']:.2f}")
        with col3:
            st.metric("Lucro Esperado", f"R$ {summary['expected_profit']:.2f}")

    # INSTRU√á√ïES DE APLICA√á√ÉO DA OPERA√á√ÉO
    if operation_summary['ia_analysis']:
        st.markdown("### üìã INSTRU√á√ïES DA OPERA√á√ÉO")
        for instruction in operation_summary['ia_analysis']['action_plan']:
            st.write(f"‚úÖ {instruction}")

    # Detalhes das apostas
    if operation_summary['hedge_bets']:
        st.markdown("### üí∞ APOSTAS APLICADAS")
        
        bets_data = []
        for bet in operation_summary['hedge_bets']:
            bets_data.append({
                'Mercado': bet['market'],
                'Tipo': bet['type'],
                'Valor': f"R$ {bet['amount']:.2f}",
                'Odd': bet['odds'],
                'Retorno Potencial': f"R$ {bet['amount'] * bet['odds']:.2f}",
                'Descri√ß√£o': bet['description']
            })
        
        df = pd.DataFrame(bets_data)
        st.dataframe(df, use_container_width=True)

    # HIST√ìRICO DE OPERA√á√ïES
    st.markdown("### üìö HIST√ìRICO DE OPERA√á√ïES")
    operations = st.session_state.hedge_manager.memory_manager.get_operation_history()
    
    if operations:
        for op in operations[:5]:  # √öltimas 5 opera√ß√µes
            with st.expander(f"Opera√ß√£o {op.operation_id} - {op.timestamp.strftime('%H:%M:%S')}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**Status:** {op.status.value}")
                    if op.ia_analysis:
                        st.write(f"**Perfil:** {op.ia_analysis.profile.value}")
                with col2:
                    st.write(f"**Investimento:** R$ {op.total_investment:.2f}")
                    st.write(f"**Apostas:** {len(op.hedge_bets)}")
                
                if op.learning_notes:
                    st.write("**Aprendizados:**")
                    for note in op.learning_notes[-3:]:  # √öltimos 3 aprendizados
                        st.write(f"‚Ä¢ {note}")

# =============================
# FUN√á√ïES DE INTEGRA√á√ÉO COM AO_VIVO.PY
# =============================

def get_current_operation_info() -> Optional[Dict]:
    """Retorna informa√ß√µes da opera√ß√£o atual para integra√ß√£o com ao_vivo.py"""
    if "hedge_manager" not in st.session_state:
        return None
    
    current_op_id = st.session_state.hedge_manager.get_current_operation_id()
    if not current_op_id:
        return None
    
    return st.session_state.hedge_manager.get_operation_summary(current_op_id)

def continue_operation_from_id(operation_id: str) -> bool:
    """Continua uma opera√ß√£o existente a partir do ID - para integra√ß√£o com ao_vivo.py"""
    if "hedge_manager" not in st.session_state:
        return False
    
    operation = st.session_state.hedge_manager.memory_manager.get_operation_by_id(operation_id)
    if not operation:
        return False
    
    st.session_state.hedge_manager.memory_manager.current_operation_id = operation_id
    st.session_state.current_operation_id = operation_id
    st.session_state.hedge_applied = True
    
    # Recarregar as apostas de hedge da opera√ß√£o
    st.session_state.hedge_manager.current_hedge_bets = operation.hedge_bets
    st.session_state.hedge_manager.applied_strategy = f"Continua√ß√£o_{operation_id}"
    
    return True

# =============================
# COMPATIBILIDADE
# =============================

def render_hedge_controls_original(zero_profit: float, fav_profit: float, aza_profit: float, odds_values: Dict):
    return render_hedge_controls(zero_profit, fav_profit, aza_profit, odds_values)

def main_hedge_module():
    """Fun√ß√£o principal para teste"""
    st.set_page_config(page_title="Hedge Instrutivo", page_icon="üéì", layout="wide")
    st.title("üõ°Ô∏è HEDGE DIN√ÇMICO COM IA INSTRUTIVA")
    
    init_hedge_state()
    
    st.sidebar.header("üìä Dados de Entrada")
    zero_profit = st.sidebar.number_input("Lucro 0x0", value=2.27, step=0.1)
    fav_profit = st.sidebar.number_input("Lucro 1x1 FAV", value=-0.98, step=0.1)
    aza_profit = st.sidebar.number_input("Lucro 1x1 AZA", value=-0.98, step=0.1)
    
    render_hedge_controls(zero_profit, fav_profit, aza_profit, {})
    
    if st.session_state.hedge_applied:
        render_hedge_results()

if __name__ == "__main__":
    main_hedge_module()
