# dinamico.py (VERS√ÉO CORRIGIDA COM SISTEMA DE PROMPTS E BOT√ïES DE C√ìPIA)
import streamlit as st
import pandas as pd
import plotly.express as px
from enum import Enum
from dataclasses import dataclass
from typing import Dict, List, Tuple, Optional
import numpy as np
from datetime import datetime
import json

# =============================
# ENUMS E DATACLASSES SINCRONIZADOS
# =============================

class RedistributionStrategy(Enum):
    NO_GOAL = "Sem Gol"
    FAV_GOAL = "Gol do Favorito"
    AZA_GOAL = "Gol do Azar√£o"
    ZERO_ZERO = "0x0"
    ONE_ONE = "1x1"
    OVER_05_AZARAO = "Mais 0,5 Gols Azar√£o"

class RiskProfile(Enum):
    CONSERVATIVE = "Conservador"
    MODERATE = "Moderado" 
    AGGRESSIVE = "Agressivo"

class OperationStatus(Enum):
    PENDING = "Pendente"
    EXECUTED = "Executada"
    CANCELLED = "Cancelada"

class MatchEvent(Enum):
    FIRST_HALF_END = "Fim do 1¬∫ Tempo"
    SECOND_HALF_START = "In√≠cio do 2¬∫ Tempo"
    FAV_GOAL = "Gol do Favorito"
    AZA_GOAL = "Gol do Azar√£o"
    FAV_RED_CARD = "Cart√£o Vermelho Favorito"
    AZA_RED_CARD = "Cart√£o Vermelho Azar√£o"
    INJURY_TIME = "Acr√©scimos"
    HALFTIME_BREAK = "Intervalo"
    MATCH_START = "In√≠cio da Partida"
    AZA_DANGEROUS_ATTACK = "Ataque Perigoso Azar√£o"
    AZA_CORNER = "Escanteio Azar√£o"
    AZA_SHOT_ON_TARGET = "Finaliza√ß√£o no Alvo Azar√£o"

@dataclass
class HedgeBet:
    bet_type: str
    amount: float
    odds: float
    description: str
    market: str
    stake_percentage: float
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()

@dataclass
class IAAnalysis:
    profile: RiskProfile
    recommended_strategy: str
    confidence: float
    key_insights: List[str]
    action_plan: List[str]
    expected_outcome: str
    prompt_suggestions: List[str]
    comprehensive_prompt: str
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()

@dataclass
class MatchStatistics:
    possession_fav: int
    possession_aza: int
    shots_fav: int
    shots_aza: int
    shots_on_target_fav: int
    shots_on_target_aza: int
    dangerous_attacks_fav: int
    dangerous_attacks_aza: int
    corners_fav: int
    corners_aza: int
    fouls_fav: int
    fouls_aza: int
    offsides_fav: int
    offsides_aza: int
    yellow_cards_fav: int
    yellow_cards_aza: int
    red_cards_fav: int
    red_cards_aza: int

@dataclass
class MatchContext:
    current_score: str
    minute: int
    statistics: MatchStatistics
    event_type: MatchEvent
    momentum: str
    additional_notes: str
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()

@dataclass
class OperationMemory:
    operation_id: str
    timestamp: datetime
    scenario: str
    profits_before: Dict[str, float]
    ia_analysis: IAAnalysis
    hedge_bets: List[HedgeBet]
    total_investment: float
    status: OperationStatus
    match_context: Optional[MatchContext] = None
    results: Optional[Dict] = None
    learning_notes: List[str] = None
    generated_prompts: List[str] = None
    
    def __post_init__(self):
        if self.learning_notes is None:
            self.learning_notes = []
        if self.generated_prompts is None:
            self.generated_prompts = []

# =============================
# SISTEMA DE AN√ÅLISE DE MINUTOS E ODDS
# =============================

class MinuteOddsAnalyzer:
    """Analisa as odds favor√°veis baseadas no minuto da partida"""
    
    def __init__(self):
        self.minute_ranges = {
            "0-15": {"description": "In√≠cio da Partida", "focus": "Odds altas para resultados espec√≠ficos"},
            "16-30": {"description": "Fase de Estudo", "focus": "Aguardando oportunidades"},
            "31-45": {"description": "Fim do 1¬∫ Tempo", "focus": "Odds favor√°veis para gols"},
            "46-60": {"description": "In√≠cio do 2¬∫ Tempo", "focus": "Ajustes t√°ticos"},
            "61-75": {"description": "Fase Decisiva", "focus": "Odds mais valorizadas"},
            "76-90": {"description": "Fim da Partida", "focus": "Prote√ß√µes urgentes"},
            "91+": {"description": "Acr√©scimos", "focus": "Odds emergenciais"}
        }
    
    def get_favorable_odds_by_minute(self, minute: int, current_score: str, odds_values: Dict) -> Dict:
        """Retorna as odds mais favor√°veis baseadas no minuto atual"""
        
        range_key = self._get_minute_range(minute)
        range_info = self.minute_ranges[range_key]
        
        favorable_odds = {}
        
        # An√°lise baseada no minuto e placar
        if minute <= 30:
            # Primeira fase - odds mais conservadoras
            if "Mais 0,5 Gols Azar√£o" in odds_values and odds_values["Mais 0,5 Gols Azar√£o"] > 1.8:
                favorable_odds["Mais 0,5 Gols Azar√£o"] = {
                    "odd": odds_values["Mais 0,5 Gols Azar√£o"],
                    "reason": "Boa oportunidade no in√≠cio do jogo",
                    "rating": "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è"
                }
                
        elif 31 <= minute <= 45:
            # Fim do primeiro tempo - odds mais agressivas
            if current_score == "0x0":
                if "Ambas Marcam - N√£o" in odds_values and odds_values["Ambas Marcam - N√£o"] > 2.0:
                    favorable_odds["Ambas Marcam - N√£o"] = {
                        "odd": odds_values["Ambas Marcam - N√£o"],
                        "reason": "Jogo fechado, boa oportunidade",
                        "rating": "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è"
                    }
                    
        elif 46 <= minute <= 60:
            # In√≠cio do segundo tempo
            if "Dupla Chance X2" in odds_values and odds_values["Dupla Chance X2"] > 2.2:
                favorable_odds["Dupla Chance X2"] = {
                    "odd": odds_values["Dupla Chance X2"],
                    "reason": "Segundo tempo equilibrado",
                    "rating": "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è"
                }
                
        elif minute >= 61:
            # Fase final - prote√ß√µes
            if "Mais 0,5 Gols Azar√£o" in odds_values and odds_values["Mais 0,5 Gols Azar√£o"] < 1.5:
                favorable_odds["Mais 0,5 Gols Azar√£o"] = {
                    "odd": odds_values["Mais 0,5 Gols Azar√£o"],
                    "reason": "Prote√ß√£o essencial no final",
                    "rating": "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è"
                }
        
        # Sempre incluir Mais 0,5 Gols Azar√£o se a odd for favor√°vel
        if "Mais 0,5 Gols Azar√£o" in odds_values and odds_values["Mais 0,5 Gols Azar√£o"] <= 2.1:
            favorable_odds["Mais 0,5 Gols Azar√£o"] = {
                "odd": odds_values["Mais 0,5 Gols Azar√£o"],
                "reason": "Prote√ß√£o fundamental em qualquer momento",
                "rating": "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è"
            }
        
        return {
            "minute_range": range_key,
            "range_description": range_info["description"],
            "focus": range_info["focus"],
            "favorable_odds": favorable_odds
        }
    
    def _get_minute_range(self, minute: int) -> str:
        """Determina a faixa de minutos"""
        if minute <= 15: return "0-15"
        elif minute <= 30: return "16-30"
        elif minute <= 45: return "31-45"
        elif minute <= 60: return "46-60"
        elif minute <= 75: return "61-75"
        elif minute <= 90: return "76-90"
        else: return "91+"
    
    def generate_minute_analysis_prompt(self, minute: int, current_score: str, odds_values: Dict) -> str:
        """Gera prompt de an√°lise baseado no minuto"""
        analysis = self.get_favorable_odds_by_minute(minute, current_score, odds_values)
        
        prompt = f"""
## ‚è∞ AN√ÅLISE POR MINUTO - SISTEMA DIN√ÇMICO

### üìä CONTEXTO TEMPORAL
- **Minuto Atual:** {minute}'
- **Faixa de Minutos:** {analysis['minute_range']} - {analysis['range_description']}
- **Foco Recomendado:** {analysis['focus']}
- **Placar Atual:** {current_score}

### üéØ ODDS FAVOR√ÅVEIS IDENTIFICADAS
"""
        
        if analysis['favorable_odds']:
            for market, info in analysis['favorable_odds'].items():
                prompt += f"- **{market}:** Odd {info['odd']:.2f} - {info['rating']}\n"
                prompt += f"  *Motivo:* {info['reason']}\n\n"
        else:
            prompt += "‚ö†Ô∏è *Nenhuma odd considerada favor√°vel no momento*\n\n"
        
        prompt += f"""
### üß† SOLICITA√á√ÉO DE AN√ÅLISE

Baseado no minuto {minute}' e placar {current_score}, analise:

1. **OPORTUNIDADES POR TEMPO:**
   - Quais mercados t√™m melhor valor neste momento?
   - Como o minuto atual impacta as probabilidades?
   - Timing ideal para entrada

2. **PROTE√á√ÉO MAIS 0,5 GOLS AZAR√ÉO:**
   - Viabilidade baseada no tempo decorrido
   - Ajustes necess√°rios na estrat√©gia
   - Momento ideal para prote√ß√£o

3. **ESTRAT√âGIA TEMPORAL:**
   - Aloca√ß√£o por faixa de minutos
   - Gerenciamento de risco temporal
   - Prepara√ß√£o para pr√≥ximos minutos

**Forne√ßa recomenda√ß√µes espec√≠ficas considerando o minuto {minute}' de jogo.**
"""
        
        return prompt

# =============================
# SISTEMA DE RETORNO P√ìS-GOL
# =============================

class PostGoalAnalyzer:
    """Analisa os retornos financeiros ap√≥s gols marcados"""
    
    def __init__(self):
        self.scenario_analysis = {
            "1x0_FAV": {
                "description": "Vit√≥ria do Favorito 1x0",
                "protected_by": ["Mais 0,5 Gols Azar√£o", "Dupla Chance X2"],
                "risk": "M√©dio",
                "recommendation": "Manter prote√ß√£o azar√£o"
            },
            "1x1_FAV": {
                "description": "Empate 1x1 com gol do favorito primeiro", 
                "protected_by": ["Mais 0,5 Gols Azar√£o"],
                "risk": "Baixo",
                "recommendation": "Prote√ß√£o ativa - considerar cashout"
            },
            "2x0_FAV": {
                "description": "Vit√≥ria convincente do favorito",
                "protected_by": ["Mais 0,5 Gols Azar√£o", "Ambas Marcam - N√£o"],
                "risk": "Alto", 
                "recommendation": "Refor√ßar prote√ß√£o azar√£o"
            },
            "0x1_AZA": {
                "description": "Vit√≥ria do azar√£o 0x1",
                "protected_by": ["Mais 0,5 Gols Azar√£o", "Dupla Chance X2"],
                "risk": "Baixo",
                "recommendation": "Prote√ß√£o funcionando - avaliar hedge"
            },
            "1x1_AZA": {
                "description": "Empate 1x1 com gol do azar√£o primeiro",
                "protected_by": ["Mais 0,5 Gols Azar√£o"],
                "risk": "Muito Baixo", 
                "recommendation": "Prote√ß√£o total - considerar realiza√ß√£o"
            },
            "0x2_AZA": {
                "description": "Vit√≥ria convincente do azar√£o",
                "protected_by": ["Mais 0,5 Gols Azar√£o", "Dupla Chance X2"],
                "risk": "Muito Baixo",
                "recommendation": "Prote√ß√£o m√°xima - realizar lucros"
            }
        }
    
    def calculate_post_goal_returns(self, goal_type: str, minute: int, current_profits: Dict) -> Dict:
        """Calcula retornos ap√≥s gol marcado"""
        
        base_scenario = f"{goal_type}_GOL"
        scenario_key = self._get_scenario_key(goal_type, minute)
        
        returns_analysis = {
            "scenario": scenario_key,
            "description": self.scenario_analysis[scenario_key]["description"],
            "risk_level": self.scenario_analysis[scenario_key]["risk"],
            "recommendation": self.scenario_analysis[scenario_key]["recommendation"],
            "protected_markets": self.scenario_analysis[scenario_key]["protected_by"],
            "minute_impact": self._calculate_minute_impact(minute),
            "returns_breakdown": self._calculate_returns_breakdown(goal_type, current_profits)
        }
        
        return returns_analysis
    
    def _get_scenario_key(self, goal_type: str, minute: int) -> str:
        """Determina a chave do cen√°rio baseado no tipo de gol e minuto"""
        if goal_type == "FAV":
            if minute <= 30:
                return "1x0_FAV"
            else:
                return "2x0_FAV"
        else:  # AZA goal
            if minute <= 30:
                return "0x1_AZA" 
            else:
                return "0x2_AZA"
    
    def _calculate_minute_impact(self, minute: int) -> str:
        """Calcula o impacto do minuto no cen√°rio"""
        if minute <= 25:
            return "Alto impacto - jogo ainda aberto"
        elif minute <= 45:
            return "M√©dio impacto - fim do primeiro tempo pr√≥ximo"
        elif minute <= 70:
            return "Impacto moderado - segundo tempo em andamento"
        else:
            return "Baixo impacto - final de jogo"
    
    def _calculate_returns_breakdown(self, goal_type: str, current_profits: Dict) -> Dict:
        """Calcula detalhamento dos retornos"""
        if goal_type == "FAV":
            return {
                "current_profit": current_profits.get("1x1_FAV", 0),
                "protected_profit": current_profits.get("1x1_FAV", 0) * 0.7,  # 70% protegido
                "max_risk": current_profits.get("0x1_AZA", 0),
                "recommended_action": "Manter prote√ß√£o azar√£o"
            }
        else:  # AZA goal
            return {
                "current_profit": current_profits.get("1x1_AZA", 0), 
                "protected_profit": current_profits.get("1x1_AZA", 0) * 0.9,  # 90% protegido
                "max_risk": current_profits.get("1x0_FAV", 0),
                "recommended_action": "Avaliar realiza√ß√£o parcial"
            }
    
    def generate_post_goal_prompt(self, goal_type: str, minute: int, current_score: str, current_profits: Dict, odds_values: Dict) -> str:
        """Gera prompt completo p√≥s-gol - VERS√ÉO CORRIGIDA (5 par√¢metros)"""
        analysis = self.calculate_post_goal_returns(goal_type, minute, current_profits)
        
        prompt = f"""
## ‚öΩ AN√ÅLISE P√ìS-GOL - SISTEMA DIN√ÇMICO

### üéâ GOL REGISTRADO
- **Time:** {'FAVORITO' if goal_type == 'FAV' else 'AZAR√ÉO'} 
- **Minuto:** {minute}'
- **Placar Atual:** {current_score}
- **Cen√°rio Atual:** {analysis['scenario']}
- **Descri√ß√£o:** {analysis['description']}

### üìä IMPACTO FINANCEIRO
- **Retorno Atual:** R$ {analysis['returns_breakdown']['current_profit']:.2f}
- **Retorno Protegido:** R$ {analysis['returns_breakdown']['protected_profit']:.2f}
- **N√≠vel de Risco:** {analysis['risk_level']}
- **Impacto Temporal:** {analysis['minute_impact']}

### üõ°Ô∏è PROTE√á√ïES ATIVAS
"""
        
        for market in analysis['protected_markets']:
            if market in odds_values:
                prompt += f"- ‚úÖ **{market}:** Odd {odds_values[market]:.2f} (Prote√ß√£o Ativa)\n"
        
        prompt += f"""
### üß† SOLICITA√á√ÉO DE AN√ÅLISE P√ìS-GOL

Baseado no gol do { 'FAVORITO' if goal_type == 'FAV' else 'AZAR√ÉO'} aos {minute}' (Placar: {current_score}), analise:

1. **REAVALIA√á√ÉO DE RISCO:**
   - Como o gol impacta a estrat√©gia atual?
   - Necessidade de ajustes nas prote√ß√µes?
   - Exposi√ß√£o residual

2. **OPORTUNIDADES EMERGENTES:**
   - Novos mercados com valor ap√≥s o gol
   - Ajustes na aloca√ß√£o
   - Timing para novas entradas

3. **PROTE√á√ÉO MAIS 0,5 GOLS AZAR√ÉO:**
   - Viabilidade atualizada
   - Ajustes necess√°rios
   - Momento ideal para realiza√ß√£o

**Forne√ßa plano de a√ß√£o espec√≠fico para os pr√≥ximos 15 minutos.**
"""
        
        return prompt

# =============================
# SISTEMA DE PROTE√á√ïES DIN√ÇMICAS
# =============================

class DynamicProtectionSystem:
    """Sistema de prote√ß√µes din√¢micas baseadas em eventos"""
    
    def __init__(self):
        self.protection_strategies = {
            "MAIS_25_GOLS": {
                "name": "Mais 2,5 Gols Partida",
                "description": "Foco em jogos abertos com muitos gols",
                "conditions": ["jogo aberto", "ambas equipes atacando", "primeiro tempo movimentado"],
                "recommended_odds": 2.0,
                "risk": "Alto"
            },
            "PROTECAO_HEDGE_AZARAO": {
                "name": "Prote√ß√£o Din√¢mica com Hedge Azar√£o", 
                "description": "Prote√ß√£o m√°xima com foco no azar√£o marcar",
                "conditions": ["azar√£o criando chances", "favorito defensivo", "jogo equilibrado"],
                "recommended_odds": 1.8,
                "risk": "M√©dio"
            },
            "MENOS_25_GOLS": {
                "name": "Menos 2,5 Gols Partida",
                "description": "Prote√ß√£o para jogos fechados",
                "conditions": ["jogo truncado", "poucas finaliza√ß√µes", "equil√≠brio defensivo"],
                "recommended_odds": 1.6,
                "risk": "Baixo"
            }
        }
    
    def recommend_protection_strategy(self, match_context: MatchContext, current_profits: Dict, odds_values: Dict) -> Dict:
        """Recomenda estrat√©gia de prote√ß√£o baseada no contexto"""
        
        strategies = []
        
        # Analisar contexto para recomenda√ß√µes
        stats = match_context.statistics
        
        # Estrat√©gia 1: Mais 2,5 Gols
        if (stats.shots_fav + stats.shots_aza) > 10 and match_context.minute <= 60:
            strategies.append({
                "strategy": "MAIS_25_GOLS",
                "name": self.protection_strategies["MAIS_25_GOLS"]["name"],
                "reason": "Jogo movimentado com muitas finaliza√ß√µes",
                "confidence": 0.7,
                "recommended_markets": ["Mais 2,5 Gols", "Ambas Marcam - Sim"],
                "expected_impact": "Alto potencial, risco elevado"
            })
        
        # Estrat√©gia 2: Prote√ß√£o Hedge Azar√£o (SEMPRE RECOMENDADA)
        if stats.shots_aza >= 2 or stats.dangerous_attacks_aza >= 3:
            strategies.append({
                "strategy": "PROTECAO_HEDGE_AZARAO", 
                "name": self.protection_strategies["PROTECAO_HEDGE_AZARAO"]["name"],
                "reason": "Azar√£o criando oportunidades consistentes",
                "confidence": 0.9,
                "recommended_markets": ["Mais 0,5 Gols Azar√£o", "Dupla Chance X2"],
                "expected_impact": "Prote√ß√£o s√≥lida com bom potencial"
            })
        
        # Estrat√©gia 3: Menos 2,5 Gols
        if (stats.shots_fav + stats.shots_aza) < 6 and match_context.minute >= 60:
            strategies.append({
                "strategy": "MENOS_25_GOLS",
                "name": self.protection_strategies["MENOS_25_GOLS"]["name"], 
                "reason": "Jogo fechado com poucas chances",
                "confidence": 0.8,
                "recommended_markets": ["Menos 2,5 Gols", "Ambas Marcam - N√£o"],
                "expected_impact": "Prote√ß√£o conservadora"
            })
        
        # Ordenar por confian√ßa
        strategies.sort(key=lambda x: x["confidence"], reverse=True)
        
        return {
            "recommended_strategies": strategies,
            "top_recommendation": strategies[0] if strategies else None,
            "analysis_timestamp": datetime.now()
        }
    
    def generate_protection_prompt(self, match_context: MatchContext, current_profits: Dict, odds_values: Dict) -> str:
        """Gera prompt para an√°lise de prote√ß√µes din√¢micas"""
        
        recommendation = self.recommend_protection_strategy(match_context, current_profits, odds_values)
        top_strategy = recommendation["top_recommendation"]
        
        prompt = f"""
## üõ°Ô∏è AN√ÅLISE DE PROTE√á√ïES DIN√ÇMICAS

### üìä CONTEXTO PARA PROTE√á√ÉO
- **Minuto:** {match_context.minute}'
- **Placar:** {match_context.current_score}
- **Evento:** {match_context.event_type.value}
- **Momentum:** {match_context.momentum}

### üéØ ESTRAT√âGIA RECOMENDADA
**{top_strategy['name']}**
- *Motivo:* {top_strategy['reason']}
- *Confian√ßa:* {top_strategy['confidence']:.0%}
- *Impacto Esperado:* {top_strategy['expected_impact']}

### üí∞ MERCADOS RECOMENDADOS
"""
        
        for market in top_strategy["recommended_markets"]:
            if market in odds_values:
                prompt += f"- **{market}:** Odd {odds_values[market]:.2f}\n"
        
        prompt += f"""
### üß† SOLICITA√á√ÉO DE AN√ÅLISE DE PROTE√á√ÉO

Baseado no contexto atual (minuto {match_context.minute}', placar {match_context.current_score}), analise:

1. **VIABILIDADE DA ESTRAT√âGIA {top_strategy['name']}:**
   - Adequa√ß√£o ao momento do jogo
   - Rela√ß√£o risco-retorno
   - Timing de implementa√ß√£o

2. **ALOCA√á√ÉO OTIMIZADA:**
   - Distribui√ß√£o por mercado
   - Tamanho ideal das posi√ß√µes
   - Prote√ß√µes complementares

3. **PLANO DE CONTING√äNCIA:**
   - Gatilhos para ajustes
   - Condi√ß√µes de sa√≠da
   - Gerenciamento de cen√°rios adversos

**Forne√ßa plano detalhado de implementa√ß√£o da prote√ß√£o din√¢mica.**
"""
        
        return prompt

# =============================
# SISTEMA DE PROMPT PADR√ÉO PARA IA
# =============================

class IAPromptGenerator:
    """Gera prompts padronizados para an√°lise da IA"""
    
    @staticmethod
    def generate_standard_protection_prompt(zero_profit: float, fav_profit: float, aza_profit: float, 
                                          odds_values: Dict, minute: int, current_score: str,
                                          statistics: Dict) -> str:
        """Gera prompt padr√£o para an√°lise de prote√ß√£o"""
        
        prompt = f"""
## üéØ AN√ÅLISE DE PROTE√á√ÉO DIN√ÇMICA - SISTEMA CONQUISTADOR

### üìä CONTEXTO ATUAL DA PARTIDA
- **Minuto:** {minute}'
- **Placar:** {current_score}
- **Momento do Jogo:** {'Primeiro Tempo' if minute <= 45 else 'Segundo Tempo'}

### üìà ESTAT√çSTICAS DO AZAR√ÉO
- **Finaliza√ß√µes:** {statistics.get('shots_aza', 0)} ({statistics.get('shots_on_target_aza', 0)} no alvo)
- **Ataques Perigosos:** {statistics.get('dangerous_attacks_aza', 0)}
- **Escanteios:** {statistics.get('corners_aza', 0)}

### üí∞ SITUA√á√ÉO FINANCEIRA ATUAL
- **Lucro 0x0:** R$ {zero_profit:.2f}
- **Lucro 1x1 FAV:** R$ {fav_profit:.2f}
- **Lucro 1x1 AZA:** R$ {aza_profit:.2f}

### üé∞ ODDS DISPON√çVEIS PARA PROTE√á√ÉO
"""
        
        # Adicionar odds dispon√≠veis
        for market, odd in odds_values.items():
            if "Mais 0,5 Gols Azar√£o" in market:
                prompt += f"- **üéØ {market}:** {odd:.2f} ‚≠ê\n"
            else:
                prompt += f"- **{market}:** {odd:.2f}\n"
        
        prompt += f"""
### üß† SOLICITA√á√ÉO DE AN√ÅLISE COMPLETA

Baseado no contexto acima, forne√ßa uma an√°lise detalhada considerando:

1. **AN√ÅLISE DE RISCO ATUAL:**
   - Qual o n√≠vel de exposi√ß√£o nos diferentes cen√°rios?
   - Quais s√£o os principais riscos identificados?
   - Como o minuto {minute}' impacta a estrat√©gia?

2. **PROTE√á√ÉO MAIS 0,5 GOLS AZAR√ÉO:**
   - Viabilidade baseada nas estat√≠sticas do azar√£o
   - Valor da odd atual ({odds_values.get('Mais 0,5 Gols Azar√£o', 0):.2f})
   - Timing ideal para implementa√ß√£o

3. **ESTRAT√âGIA DE HEDGE RECOMENDADA:**
   - Combina√ß√£o ideal de mercados
   - Aloca√ß√£o de capital por prote√ß√£o
   - Sequ√™ncia de implementa√ß√£o

4. **PLANO DE CONTING√äNCIA:**
   - Gatilhos para ajustes
   - Condi√ß√µes de sa√≠da
   - Gerenciamento de cen√°rios adversos

**Forne√ßa recomenda√ß√µes espec√≠ficas e acion√°veis para os pr√≥ximos 15-20 minutos de jogo.**
"""
        
        return prompt
    
    @staticmethod
    def generate_goal_analysis_prompt(goal_type: str, minute: int, current_score: str, 
                                    current_profits: Dict, odds_values: Dict) -> str:
        """Gera prompt para an√°lise p√≥s-gol - VERS√ÉO ESPEC√çFICA POR TIPO DE GOL"""
        
        # üî• CORRE√á√ÉO: GARANTIR que o placar est√° atualizado
        if current_score == "0x0":
            # Se ainda est√° 0x0, atualizar baseado no gol
            if goal_type == "FAV":
                current_score = "1x0"
            else:
                current_score = "0x1"
        
        # üî• PROMPT ESPEC√çFICO PARA GOL DO AZAR√ÉO
        if goal_type == "AZA":
            return IAPromptGenerator._generate_azarao_goal_prompt(minute, current_score, current_profits, odds_values)
        else:
            return IAPromptGenerator._generate_favorito_goal_prompt(minute, current_score, current_profits, odds_values)
    
    @staticmethod
    def _generate_azarao_goal_prompt(minute: int, current_score: str, current_profits: Dict, odds_values: Dict) -> str:
        """Gera prompt ESPEC√çFICO para gol do azar√£o"""
        
        prompt = f"""
## ‚öΩ AN√ÅLISE P√ìS-GOL DO AZAR√ÉO - SISTEMA DIN√ÇMICO

### üéâ GOL DO AZAR√ÉO REGISTRADO!
- **‚è∞ Minuto:** {minute}'
- **üìä Placar Atual:** {current_score}
- **üéØ Situa√ß√£o:** Azar√£o abriu o placar

### üí∞ IMPACTO FINANCEIRO IMEDIATO - GOL AZAR√ÉO
- **üìâ Lucro 0x0:** R$ {current_profits.get('0x0', 0):.2f}
- **üìâ Lucro 1x1 FAV:** R$ {current_profits.get('1x1_FAV', 0):.2f}
- **üìà Lucro 1x1 AZA:** R$ {current_profits.get('1x1_AZA', 0):.2f}

### üõ°Ô∏è PROTE√á√ïES ATIVAS AP√ìS GOL AZAR√ÉO
"""
        
        # Destaque espec√≠fico para prote√ß√µes relevantes p√≥s-gol azar√£o
        protection_marks = {
            "Mais 0,5 Gols Azar√£o": "‚úÖ **PROTE√á√ÉO ATIVADA**",
            "Dupla Chance X2": "‚úÖ **PROTE√á√ÉO REFOR√áADA**", 
            "Ambas Marcam - Sim": "üìà **VALOR AUMENTADO**",
            "Vit√≥ria Favorito": "üìâ **RISCO ELEVADO**",
            "Menos 2,5 Gols": "‚ö†Ô∏è **CEN√ÅRIO COMPROMETIDO**"
        }
        
        for market, odd in odds_values.items():
            mark = protection_marks.get(market, "")
            prompt += f"- **{market}:** {odd:.2f} {mark}\n"
        
        prompt += f"""
### üß† SOLICITA√á√ÉO DE AN√ÅLISE ESPEC√çFICA - GOL AZAR√ÉO

Baseado no **GOL DO AZAR√ÉO** aos {minute}' (Placar: {current_score}), forne√ßa an√°lise detalhada:

## üéØ CEN√ÅRIOS P√ìS-GOL AZAR√ÉO:

**1. üìä REAVALIA√á√ÉO DE RISCO IMEDIATA:**
- Como o gol do azar√£o impacta a exposi√ß√£o atual?
- Quais cen√°rios se tornaram MAIS prov√°veis: 0x2, 1x2, 0x1?
- Quais cen√°rios se tornaram MENOS prov√°veis: 2x0, 3x0, 1x0?
- N√≠vel de urg√™ncia para ajustes (Alto/M√©dio/Baixo)

**2. üõ°Ô∏è EFIC√ÅCIA DAS PROTE√á√ïES:**
- A prote√ß√£o "Mais 0,5 Gols Azar√£o" j√° est√° realizando lucro?
- "Dupla Chance X2" agora cobre empate OU vit√≥ria azar√£o - como aproveitar?
- Quais prote√ß√µes devem ser REFOR√áADAS imediatamente?
- Quais prote√ß√µes podem ser REDUZIDAS?

**3. üí° OPORTUNIDADES ESTRAT√âGICAS:**
- Odds que se tornaram SUBVALORIZADAS ap√≥s o gol?
- Mercados com melhor rela√ß√£o risco/retorno agora?
- Timing para NOVAS entradas (imediato/aguardar)?
- Aloca√ß√£o ideal considerando o novo contexto

**4. ‚ö° PLANO DE A√á√ÉO PR√ÅTICO:**
- **PR√ìXIMOS 5 MINUTOS:** A√ß√µes cr√≠ticas imediatas
- **PR√ìXIMOS 10-15 MINUTOS:** Estrat√©gia de m√©dio prazo  
- **GATILHOS** para ajustes adicionais
- **CONDI√á√ïES DE SA√çDA** para realizar lucros

**5. üìà AN√ÅLISE COMPORTAMENTAL:**
- Como o favorito tende a reagir ap√≥s sofrer gol?
- Probabilidade de rea√ß√£o imediata do favorito?
- Cen√°rios de "virada" vs. "conforma√ß√£o"?

## üé≤ PROBABILIDADES ESTIMADAS P√ìS-GOL AZAR√ÉO:
- Empate 1x1: ?%
- Vit√≥ria Azar√£o 0x2: ?% 
- Virada Favorito 2x1: ?%
- Manuten√ß√£o 0x1: ?%

**Forne√ßa recomenda√ß√µes ESPEC√çFICAS e ACION√ÅVEIS baseadas exclusivamente no CEN√ÅRIO DE GOL DO AZAR√ÉO.**
"""
        
        return prompt
    
    @staticmethod
    def _generate_favorito_goal_prompt(minute: int, current_score: str, current_profits: Dict, odds_values: Dict) -> str:
        """Gera prompt ESPEC√çFICO para gol do favorito"""
        
        prompt = f"""
## ‚öΩ AN√ÅLISE P√ìS-GOL DO FAVORITO - SISTEMA DIN√ÇMICO

### üéâ GOL DO FAVORITO REGISTRADO!
- **‚è∞ Minuto:** {minute}'
- **üìä Placar Atual:** {current_score}
- **üéØ Situa√ß√£o:** Favorito abriu o placar

### üí∞ IMPACTO FINANCEIRO IMEDIATO - GOL FAVORITO
- **üìâ Lucro 0x0:** R$ {current_profits.get('0x0', 0):.2f}
- **üìà Lucro 1x1 FAV:** R$ {current_profits.get('1x1_FAV', 0):.2f}
- **üìâ Lucro 1x1 AZA:** R$ {current_profits.get('1x1_AZA', 0):.2f}

### üõ°Ô∏è PROTE√á√ïES ATIVAS AP√ìS GOL FAVORITO
"""
        
        # Destaque espec√≠fico para prote√ß√µes relevantes p√≥s-gol favorito
        protection_marks = {
            "Mais 0,5 Gols Azar√£o": "‚ö†Ô∏è **PROTE√á√ÉO MANTIDA**",
            "Dupla Chance 1X": "‚úÖ **PROTE√á√ÉO CONSOLIDADA**",
            "Ambas Marcam - N√£o": "üìà **VALOR AUMENTADO**",
            "Vit√≥ria Favorito": "‚úÖ **APOSTA ATIVADA**",
            "Mais 2,5 Gols": "üìà **POTENCIAL AUMENTADO**"
        }
        
        for market, odd in odds_values.items():
            mark = protection_marks.get(market, "")
            prompt += f"- **{market}:** {odd:.2f} {mark}\n"
        
        prompt += f"""
### üß† SOLICITA√á√ÉO DE AN√ÅLISE ESPEC√çFICA - GOL FAVORITO

Baseado no **GOL DO FAVORITO** aos {minute}' (Placar: {current_score}), forne√ßa an√°lise detalhada:

## üéØ CEN√ÅRIOS P√ìS-GOL FAVORITO:

**1. üìä REAVALIA√á√ÉO DE RISCO IMEDIATA:**
- Como o gol do favorito impacta a exposi√ß√£o atual?
- Quais cen√°rios se tornaram MAIS prov√°veis: 2x0, 3x0, 2x1?
- Quais cen√°rios se tornaram MENOS prov√°veis: 0x1, 1x2, 0x0?
- N√≠vel de urg√™ncia para ajustes (Alto/M√©dio/Baixo)

**2. üõ°Ô∏è EFIC√ÅCIA DAS PROTE√á√ïES:**
- A prote√ß√£o "Mais 0,5 Gols Azar√£o" ainda √© necess√°ria?
- "Dupla Chance 1X" agora cobre vit√≥ria OU empate - como otimizar?
- Quais prote√ß√µes devem ser MANTIDAS?
- Quais prote√ß√µes podem ser AJUSTADAS?

**3. üí° OPORTUNIDADES ESTRAT√âGICAS:**
- Odds que se tornaram SOBREVALORIZADAS ap√≥s o gol?
- Mercados com melhor valor para hedge?
- Timing para realizar lucros parciais?
- Aloca√ß√£o ideal considerando domin√¢ncia do favorito

**4. ‚ö° PLANO DE A√á√ÉO PR√ÅTICO:**
- **PR√ìXIMOS 5 MINUTOS:** A√ß√µes recomendadas
- **PR√ìXIMOS 10-15 MINUTOS:** Estrat√©gia consolidada
- **GATILHOS** para prote√ß√µes adicionais
- **CONDI√á√ïES** para cashout parcial

**5. üìà AN√ÅLISE COMPORTAMENTAL:**
- Como o azar√£o tende a reagir ap√≥s sofrer gol?
- Probabilidade de rea√ß√£o do azar√£o?
- Cen√°rios de "expans√£o" vs. "contens√£o"?

## üé≤ PROBABILIDADES ESTIMADAS P√ìS-GOL FAVORITO:
- Vit√≥ria 2x0: ?%
- Empate 1x1: ?%
- Vit√≥ria 2x1: ?%
- Manuten√ß√£o 1x0: ?%

**Forne√ßa recomenda√ß√µes ESPEC√çFICAS e ACION√ÅVEIS baseadas exclusivamente no CEN√ÅRIO DE GOL DO FAVORITO.**
"""
        
        return prompt

# =============================
# ANALISADOR DE IA SINCRONIZADO
# =============================

class IAAnalyzer:
    def __init__(self):
        self.risk_profiles = {
            RiskProfile.CONSERVATIVE: {"max_risk": 0.2, "protection_focus": 0.7},
            RiskProfile.MODERATE: {"max_risk": 0.3, "protection_focus": 0.5},
            RiskProfile.AGGRESSIVE: {"max_risk": 0.4, "protection_focus": 0.3}
        }
        self.minute_analyzer = MinuteOddsAnalyzer()
        self.protection_system = DynamicProtectionSystem()
        self.prompt_generator = IAPromptGenerator()
    
    def analyze_current_situation(self, zero_profit: float, fav_profit: float, aza_profit: float, 
                                total_investment: float = 100, match_context: MatchContext = None,
                                odds_values: Dict = None) -> IAAnalysis:
        """Analisa a situa√ß√£o atual com foco em sincroniza√ß√£o"""
        
        profits = [zero_profit, fav_profit, aza_profit]
        max_profit = max(profits)
        min_profit = min(profits)
        volatility = abs(max_profit - min_profit)
        
        # Ajustar an√°lise baseado no contexto
        context_adjustment = self._adjust_for_match_context(match_context, volatility)
        adjusted_volatility = volatility * context_adjustment['volatility_multiplier']
        
        # Determinar perfil de risco
        if adjusted_volatility < 5:
            profile = RiskProfile.CONSERVATIVE
            strategy = "Prote√ß√£o M√°xima com Mais 0,5 Gols Azar√£o"
            insights = ["Baixa volatilidade entre cen√°rios", "Risco controlado", "Foco em prote√ß√£o"] + context_adjustment['insights']
            action_plan = self._generate_conservative_actions(zero_profit, fav_profit, aza_profit, total_investment, match_context)
            expected_outcome = "Prote√ß√£o de 70% do lucro m√°ximo com risco m√≠nimo"
            
        elif adjusted_volatility < 15:
            profile = RiskProfile.MODERATE
            strategy = "Hedge Balanceado com Prote√ß√£o Azar√£o"
            insights = ["Volatilidade moderada", "Oportunidade de hedge equilibrado", "Risco calculado"] + context_adjustment['insights']
            action_plan = self._generate_moderate_actions(zero_profit, fav_profit, aza_profit, total_investment, match_context)
            expected_outcome = "Balanceamento entre prote√ß√£o e oportunidade (50/50)"
            
        else:
            profile = RiskProfile.AGGRESSIVE
            strategy = "Hedge Oportunista com Foco Azar√£o"
            insights = ["Alta volatilidade", "Potencial para ganhos significativos", "Risco elevado"] + context_adjustment['insights']
            action_plan = self._generate_aggressive_actions(zero_profit, fav_profit, aza_profit, total_investment, match_context)
            expected_outcome = "Busca por maximiza√ß√£o de lucros com aceita√ß√£o de risco"
        
        # Calcular confian√ßa
        positive_profits = sum(1 for p in profits if p > 0)
        confidence = min(0.95, 0.5 + (positive_profits * 0.15) * context_adjustment['confidence_multiplier'])
        
        # Gerar prompts
        prompt_suggestions = self._generate_prompt_suggestions(profile, match_context, profits, odds_values)
        comprehensive_prompt = self._generate_comprehensive_prompt(profile, match_context, profits, odds_values, action_plan)
        
        return IAAnalysis(
            profile=profile,
            recommended_strategy=strategy,
            confidence=confidence,
            key_insights=insights,
            action_plan=action_plan,
            expected_outcome=expected_outcome,
            prompt_suggestions=prompt_suggestions,
            comprehensive_prompt=comprehensive_prompt
        )
    
    def _adjust_for_match_context(self, match_context: MatchContext, base_volatility: float) -> Dict:
        """Ajusta an√°lise baseado no contexto atual da partida"""
        if not match_context:
            return {
                'volatility_multiplier': 1.0,
                'confidence_multiplier': 1.0,
                'insights': ["Partida ainda n√£o iniciada"]
            }
        
        insights = []
        volatility_multiplier = 1.0
        confidence_multiplier = 1.0
        
        # An√°lise temporal
        if match_context.minute <= 45:
            insights.append(f"‚è∞ Primeiro tempo em andamento ({match_context.minute}')")
            if match_context.minute < 25:
                volatility_multiplier *= 0.8
            else:
                volatility_multiplier *= 1.2
        else:
            insights.append(f"‚è∞ Segundo tempo em andamento ({match_context.minute}')")
            volatility_multiplier *= 1.5
        
        # An√°lise de placar
        if match_context.current_score == "0x0":
            insights.append("üìä Placar 0x0 - Alta incerteza")
            volatility_multiplier *= 1.3
        else:
            insights.append(f"üìä Placar {match_context.current_score} - Cen√°rio definido")
            confidence_multiplier *= 1.2
        
        # An√°lise de momentum
        if match_context.momentum == 'FAV':
            insights.append("üìà Momentum do favorito")
            confidence_multiplier *= 1.1
        elif match_context.momentum == 'AZA':
            insights.append("üìâ Momentum do azar√£o")
            volatility_multiplier *= 1.4
        
        # An√°lise de eventos espec√≠ficos para Mais 0,5 Gols Azar√£o
        if match_context.event_type in [MatchEvent.AZA_DANGEROUS_ATTACK, MatchEvent.AZA_CORNER, MatchEvent.AZA_SHOT_ON_TARGET]:
            insights.append("üéØ Azar√£o criando oportunidades - Forte candidato para Mais 0,5 Gols")
            volatility_multiplier *= 1.2
            confidence_multiplier *= 1.1
        
        # An√°lise estat√≠stica para Mais 0,5 Gols Azar√£o
        if match_context.statistics:
            stats = match_context.statistics
            if stats.shots_aza > 3 or stats.shots_on_target_aza > 1:
                insights.append("üéØ Azar√£o com finaliza√ß√µes - Bom cen√°rio para Mais 0,5 Gols")
                volatility_multiplier *= 1.1
            if stats.dangerous_attacks_aza > 5:
                insights.append("‚ö° Azar√£o com ataques perigosos - Probabilidade aumentada para gol")
                volatility_multiplier *= 1.15
        
        return {
            'volatility_multiplier': volatility_multiplier,
            'confidence_multiplier': confidence_multiplier,
            'insights': insights
        }
    
    def _generate_comprehensive_prompt(self, profile: RiskProfile, match_context: MatchContext, 
                                     profits: List[float], odds_values: Dict, action_plan: List[str]) -> str:
        """Gera prompt completo para an√°lise da IA"""
        
        if not match_context:
            return self._generate_pre_match_prompt(profile, profits, odds_values, action_plan)
        
        stats = match_context.statistics
        
        # Gerar an√°lise de minuto
        minute_analysis = self.minute_analyzer.get_favorable_odds_by_minute(
            match_context.minute, match_context.current_score, odds_values
        )
        
        prompt = f"""
## üéØ AN√ÅLISE DIN√ÇMICA SINCRONIZADA - SISTEMA CONQUISTADOR

### ‚è∞ CONTEXTO TEMPORAL
- **Minuto:** {match_context.minute}' ({minute_analysis['minute_range']})
- **Fase do Jogo:** {minute_analysis['range_description']}
- **Foco Recomendado:** {minute_analysis['focus']}

### ‚öΩ SITUA√á√ÉO DA PARTIDA
- **Placar Atual:** {match_context.current_score}
- **Evento Recente:** {match_context.event_type.value}
- **Momentum:** {match_context.momentum}

### üìà ESTAT√çSTICAS DETALHADAS:
- **POSSE DE BOLA:** Favorito {stats.possession_fav}% - Azar√£o {stats.possession_aza}%
- **FINALIZA√á√ïES:** Favorito {stats.shots_fav} ({stats.shots_on_target_fav} no alvo) - Azar√£o {stats.shots_aza} ({stats.shots_on_target_aza} no alvo)
- **ATAQUES PERIGOSOS:** Favorito {stats.dangerous_attacks_fav} - Azar√£o {stats.dangerous_attacks_aza}
- **ESCANTEIOS:** Favorito {stats.corners_fav} - Azar√£o {stats.corners_aza}

### üéØ ODDS FAVOR√ÅVEIS POR MINUTO
"""
        
        if minute_analysis['favorable_odds']:
            for market, info in minute_analysis['favorable_odds'].items():
                prompt += f"- **{market}:** {info['odd']:.2f} {info['rating']} - {info['reason']}\n"
        else:
            prompt += "‚ö†Ô∏è *Nenhuma odd identificada como favor√°vel no momento*\n"

        prompt += f"""
### üõ°Ô∏è AN√ÅLISE ESPEC√çFICA PARA MAIS 0,5 GOLS AZAR√ÉO
**INDICADORES FAVOR√ÅVEIS:**
- Finaliza√ß√µes do Azar√£o: {stats.shots_aza} (No alvo: {stats.shots_on_target_aza})
- Ataques Perigosos Azar√£o: {stats.dangerous_attacks_aza}
- Escanteios Azar√£o: {stats.corners_aza}
- **PROBABILIDADE ESTIMADA:** {self._calculate_azarao_goal_probability(stats, match_context.minute):.1f}%

### üí∞ SITUA√á√ÉO FINANCEIRA ATUAL
**LUCROS POR CEN√ÅRIO:**
- **0x0:** R$ {profits[0]:.2f}
- **1x1 FAV:** R$ {profits[1]:.2f}
- **1x1 AZA:** R$ {profits[2]:.2f}

**PERFIL E ESTRAT√âGIA:**
- **Perfil de Risco:** {profile.value}
- **Estrat√©gia Recomendada:** {profile.value}
"""
        
        # Adicionar odds dispon√≠veis
        if odds_values:
            prompt += "\n### üé∞ ODDS ATUAIS DISPON√çVEIS\n"
            for market, odd in odds_values.items():
                if "Mais 0,5 Gols Azar√£o" in market:
                    prompt += f"- **üéØ {market}:** {odd:.2f} ‚≠ê\n"
                else:
                    prompt += f"- **{market}:** {odd:.2f}\n"
        
        prompt += f"""
### üß† SOLICITA√á√ÉO DE AN√ÅLISE COMPLETA:

Baseado no contexto completo da partida (minuto {match_context.minute}', placar {match_context.current_score}), forne√ßa:

1. **AN√ÅLISE T√ÅTICA DO JOGO:**
   - Equil√≠brio das equipes baseado nas estat√≠sticas
   - Domin√¢ncia real vs. resultado
   - Fatores que podem influenciar o restante da partida

2. **PROBABILIDADES ATUALIZADAS - ESPECIALMENTE MAIS 0,5 GOLS AZAR√ÉO:**
   - Probabilidade real do azar√£o marcar baseado nas estat√≠sticas
   - Valor da odd atual para Mais 0,5 Gols Azar√£o
   - Cen√°rios mais prov√°veis considerando o andamento

3. **ESTRAT√âGIA DE INVESTIMENTO COM PROTE√á√ÉO AZAR√ÉO:**
   - Distribui√ß√£o ideal considerando a prote√ß√£o do azar√£o
   - Oportunidades de value bet em Mais 0,5 Gols Azar√£o
   - Prote√ß√µes necess√°rias e hedge natural

**Forne√ßa recomenda√ß√µes espec√≠ficas e acion√°veis para a estrat√©gia de Mais 0,5 Gols Azar√£o.**
"""
        
        return prompt
    
    def _calculate_azarao_goal_probability(self, stats: MatchStatistics, minute: int) -> float:
        """Calcula probabilidade estimada do azar√£o marcar"""
        base_prob = 35.0
        
        # Ajustes baseados em estat√≠sticas
        if stats.shots_on_target_aza > 0:
            base_prob += stats.shots_on_target_aza * 8
        
        if stats.dangerous_attacks_aza > 5:
            base_prob += (stats.dangerous_attacks_aza - 5) * 2
        
        if stats.corners_aza > 2:
            base_prob += (stats.corners_aza - 2) * 3
        
        # Ajuste temporal
        if minute > 60:
            base_prob += 15
        elif minute > 30:
            base_prob += 8
        
        return min(85.0, base_prob)
    
    def _generate_pre_match_prompt(self, profile: RiskProfile, profits: List[float], odds_values: Dict, action_plan: List[str]) -> str:
        """Gera prompt para an√°lise pr√©-partida"""
        prompt = f"""
## üéØ AN√ÅLISE PR√â-PARTIDA - SISTEMA CONQUISTADOR

### üí∞ SITUA√á√ÉO FINANCEIRA INICIAL
**LUCROS POR CEN√ÅRIO:**
- **0x0:** R$ {profits[0]:.2f}
- **1x1 FAV:** R$ {profits[1]:.2f}
- **1x1 AZA:** R$ {profits[2]:.2f}

**PERFIL E ESTRAT√âGIA:**
- **Perfil de Risco:** {profile.value}
- **Plano de A√ß√£o:** {', '.join(action_plan)}

### üõ°Ô∏è ESTRAT√âGIA MAIS 0,5 GOLS AZAR√ÉO
**PROTE√á√ÉO IMPLEMENTADA:** 
- ‚úÖ Empates 1x1 onde azar√£o marca
- ‚úÖ Vit√≥rias 2x1 do favorito com gol de honra
- ‚úÖ Qualquer resultado com gol do azar√£o
"""
        
        return prompt
    
    def _generate_prompt_suggestions(self, profile: RiskProfile, match_context: MatchContext, 
                                   profits: List[float], odds_values: Dict) -> List[str]:
        """Gera sugest√µes de prompt espec√≠ficas"""
        suggestions = []
        
        if match_context and match_context.event_type == MatchEvent.FIRST_HALF_END:
            suggestions.append(self._generate_halftime_prompt(profile, match_context, profits, odds_values))
        
        if match_context and match_context.event_type in [MatchEvent.FAV_GOAL, MatchEvent.AZA_GOAL]:
            suggestions.append(self._generate_goal_prompt(profile, match_context, profits, odds_values))
        
        if match_context and match_context.event_type in [MatchEvent.AZA_DANGEROUS_ATTACK, MatchEvent.AZA_CORNER, MatchEvent.AZA_SHOT_ON_TARGET]:
            suggestions.append(self._generate_azarao_opportunity_prompt(profile, match_context, profits, odds_values))
        
        suggestions.append(self._generate_general_analysis_prompt(profile, match_context, profits, odds_values))
        
        return suggestions
    
    def _generate_azarao_opportunity_prompt(self, profile: RiskProfile, match_context: MatchContext, 
                                          profits: List[float], odds_values: Dict) -> str:
        """Gera prompt espec√≠fico para oportunidades do azar√£o"""
        stats = match_context.statistics
        
        return f"""
## üéØ OPORTUNIDADE MAIS 0,5 GOLS AZAR√ÉO

### ‚ö° EVENTO FAVOR√ÅVEL DETECTADO
**Evento:** {match_context.event_type.value}
**Minuto:** {match_context.minute}' | **Placar:** {match_context.current_score}

### üìä ESTAT√çSTICAS DO AZAR√ÉO
- Finaliza√ß√µes: {stats.shots_aza} ({stats.shots_on_target_aza} no alvo)
- Ataques Perigosos: {stats.dangerous_attacks_aza}
- Escanteios: {stats.corners_aza}
- **Probabilidade Estimada de Gol:** {self._calculate_azarao_goal_probability(stats, match_context.minute):.1f}%

Analise a oportunidade emergente para Mais 0,5 Gols Azar√£o considerando o contexto atual.
"""
    
    def _generate_halftime_prompt(self, profile: RiskProfile, match_context: MatchContext, 
                                profits: List[float], odds_values: Dict) -> str:
        """Gera prompt espec√≠fico para an√°lise do intervalo"""
        stats = match_context.statistics
        
        return f"""
## üîÑ AN√ÅLISE DO INTERVALO

### ‚öΩ RESUMO DO PRIMEIRO TEMPO
**Placar:** {match_context.current_score} | **Estat√≠sticas Chave:**
- Posse: {stats.possession_fav}% vs {stats.possession_aza}%
- Finaliza√ß√µes: {stats.shots_fav}({stats.shots_on_target_fav}) vs {stats.shots_aza}({stats.shots_on_target_aza})

### üõ°Ô∏è AN√ÅLISE MAIS 0,5 GOLS AZAR√ÉO - INTERVALO
**Performance do Azar√£o:**
- Finaliza√ß√µes: {stats.shots_aza} (No alvo: {stats.shots_on_target_aza})
- Ataques Perigosos: {stats.dangerous_attacks_aza}
- **Probabilidade 2¬∫ Tempo:** {min(70, self._calculate_azarao_goal_probability(stats, match_context.minute) + 15):.1f}%

Analise o primeiro tempo e forne√ßa previs√µes para o segundo tempo com FOCO EM MAIS 0,5 GOLS AZAR√ÉO.
"""
    
    def _generate_goal_prompt(self, profile: RiskProfile, match_context: MatchContext, 
                            profits: List[float], odds_values: Dict) -> str:
        """Gera prompt espec√≠fico para an√°lise p√≥s-gol"""
        goal_team = "FAVORITO" if match_context.event_type == MatchEvent.FAV_GOAL else "AZAR√ÉO"
        
        return f"""
## ‚öΩ AN√ÅLISE P√ìS-GOL

### üéâ GOL MARCADO
**Time:** {goal_team} | **Placar:** {match_context.current_score} | **Minuto:** {match_context.minute}'

Analise o impacto imediato do gol na estrat√©gia Mais 0,5 Gols Azar√£o.
"""
    
    def _generate_general_analysis_prompt(self, profile: RiskProfile, match_context: MatchContext, 
                                        profits: List[float], odds_values: Dict) -> str:
        """Gera prompt geral para an√°lise em tempo real"""
        return f"""
## üìä AN√ÅLISE EM TEMPO REAL

### ‚öΩ CONTEXTO ATUAL
**Placar:** {match_context.current_score if match_context else '0x0'} | **Minuto:** {match_context.minute if match_context else '0'}'

Forne√ßa uma an√°lise completa do momento atual com FOCO EM MAIS 0,5 GOLS AZAR√ÉO.
"""
    
    def _generate_conservative_actions(self, zero_profit: float, fav_profit: float, aza_profit: float, 
                                     total_investment: float, match_context: MatchContext) -> List[str]:
        """Gera instru√ß√µes para perfil conservador"""
        max_profit = max(zero_profit, fav_profit, aza_profit)
        actions = [
            f"üéØ OBJETIVO: Proteger {max_profit:.2f} de lucro m√°ximo",
            f"üí∞ INVESTIR: M√°ximo 20% do bankroll (R$ {total_investment * 0.2:.2f})",
            f"üõ°Ô∏è ESTRAT√âGIA: 70% em prote√ß√£o, 30% em oportunidades seguras",
            f"üéØ MAIS 0,5 AZAR√ÉO: Alocar 40% do hedge nesta prote√ß√£o",
            f"‚è∞ TIMING: Aplicar hedge imediatamente",
            f"üìä META: Garantir pelo menos 70% do lucro m√°ximo ({max_profit * 0.7:.2f})"
        ]
        
        if match_context and match_context.minute > 40:
            actions.append("üîî ATEN√á√ÉO: Fim do primeiro tempo pr√≥ximo - considerar esperar para melhor odds")
        
        return actions
    
    def _generate_moderate_actions(self, zero_profit: float, fav_profit: float, aza_profit: float, 
                                 total_investment: float, match_context: MatchContext) -> List[str]:
        """Gera instru√ß√µes para perfil moderado"""
        max_profit = max(zero_profit, fav_profit, aza_profit)
        actions = [
            f"üéØ OBJETIVO: Balancear prote√ß√£o e oportunidade",
            f"üí∞ INVESTIR: At√© 30% do bankroll (R$ {total_investment * 0.3:.2f})",
            f"‚öñÔ∏è ESTRAT√âGIA: 50% prote√ß√£o, 50% oportunidades",
            f"üéØ MAIS 0,5 AZAR√ÉO: Alocar 50% do hedge nesta prote√ß√£o",
            f"‚è∞ TIMING: Aplicar hedge nos pr√≥ximos 10-15 minutos",
            f"üìä META: Lucro l√≠quido m√≠nimo de {max_profit * 0.5:.2f}"
        ]
        
        return actions
    
    def _generate_aggressive_actions(self, zero_profit: float, fav_profit: float, aza_profit: float, 
                                   total_investment: float, match_context: MatchContext) -> List[str]:
        """Gera instru√ß√µes para perfil agressivo"""
        max_profit = max(zero_profit, fav_profit, aza_profit)
        actions = [
            f"üéØ OBJETIVO: Maximizar lucro aproveitando volatilidade",
            f"üí∞ INVESTIR: At√© 40% do bankroll (R$ {total_investment * 0.4:.2f})",
            f"üé≤ ESTRAT√âGIA: 30% prote√ß√£o, 70% oportunidades agressivas",
            f"üéØ MAIS 0,5 AZAR√ÉO: Alocar 60% do hedge nesta prote√ß√£o agressiva",
            f"‚è∞ TIMING: Aplicar hedge durante picos de odds",
            f"üìä META: Potencial de lucro > {max_profit * 1.2:.2f}"
        ]
        
        return actions

# =============================
# GERENCIADOR DIN√ÇMICO ATUALIZADO
# =============================

class DynamicHedgeManager:
    def __init__(self):
        self.current_hedge_bets: List[HedgeBet] = []
        self.applied_strategy = None
        self.ia_analyzer = IAAnalyzer()
        self.memory_manager = OperationMemoryManager()
        # NOVOS COMPONENTES
        self.minute_analyzer = MinuteOddsAnalyzer()
        self.post_goal_analyzer = PostGoalAnalyzer()
        self.protection_system = DynamicProtectionSystem()
        self.prompt_generator = IAPromptGenerator()
        self.match_events = []
        
    def generate_automatic_protection_prompt(self, zero_profit: float, fav_profit: float, aza_profit: float,
                                           odds_values: Dict, minute: int, current_score: str,
                                           statistics: Dict, use_analise_conquistador: bool = False) -> str:
        """Gera prompt autom√°tico de prote√ß√£o usando a nova fun√ß√£o"""
        return gerar_prompt_automatico_protecao(
            zero_profit, fav_profit, aza_profit, odds_values, minute, current_score,
            statistics, use_analise_conquistador
        )
    
    def register_goal_event(self, goal_type: str, minute: int, current_profits: Dict):
        """Registra evento de gol e gera an√°lise - VERS√ÉO COMPAT√çVEL COM AMBOS OS SISTEMAS"""
        try:
            event_id = f"GOL_{goal_type}_{minute}_{datetime.now().strftime('%H%M%S')}"
            
            # Calcular novo placar
            current_score = st.session_state.get('current_score_dyn', '0x0')
            home_goals, away_goals = map(int, current_score.split('x'))
            
            if goal_type == "FAV":
                new_score = f"{home_goals + 1}x{away_goals}"
            else:  # AZA
                new_score = f"{home_goals}x{away_goals + 1}"
            
            # üî• USAR AMBOS OS SISTEMAS DE FORMA COMPAT√çVEL
            
            # 1. PostGoalAnalyzer (para outras partes do sistema)
            post_goal_analysis = self.post_goal_analyzer.calculate_post_goal_returns(goal_type, minute, current_profits)
            post_goal_prompt = self.post_goal_analyzer.generate_post_goal_prompt(
                goal_type, minute, new_score, current_profits, {}
            )
            
            # 2. IAPromptGenerator (para interface - mais espec√≠fico)
            ia_prompt = self.prompt_generator.generate_goal_analysis_prompt(
                goal_type, minute, new_score, current_profits, {}
            )
            
            # Registrar evento com ambos os prompts
            event = {
                "event_id": event_id,
                "type": "GOAL",
                "goal_type": goal_type,
                "minute": minute,
                "current_score": new_score,
                "timestamp": datetime.now(),
                "analysis": post_goal_analysis,
                "post_goal_prompt": post_goal_prompt,  # Para outras partes do sistema
                "ia_prompt": ia_prompt  # Para a interface
            }
            
            self.match_events.append(event)
            
            # üî• USAR O PROMPT DO IAPromptGenerator NA INTERFACE (mais espec√≠fico)
            st.session_state.current_prompt = ia_prompt
            st.session_state.mostrar_prompt = True
            
            return event
            
        except Exception as e:
            st.error(f"‚ùå Erro ao registrar gol: {e}")
            return None

    def _trigger_interface_update(self, goal_type: str, minute: int, current_score: str):
        """Dispara atualiza√ß√£o da interface sem modificar session_state diretamente"""
        # Marcar que precisa atualizar a interface
        st.session_state.need_interface_refresh = True
        st.session_state.pending_score_update = current_score
        st.session_state.pending_goal_type = goal_type
        st.session_state.pending_goal_minute = minute

    def _get_updated_score(self, goal_type: str) -> str:
        """Atualiza o placar baseado no tipo de gol - VERS√ÉO CORRIGIDA"""
        try:
            # Obter placar atual do session_state SEM usar o widget diretamente
            current_score = st.session_state.get('current_score_dyn', '0x0')
            
            # Se n√£o existe no session_state, usar valor padr√£o
            if not current_score:
                current_score = "0x0"
                
            home_goals, away_goals = map(int, current_score.split('x'))
            
            # Atualizar placar
            if goal_type == "FAV":
                home_goals += 1
            else:  # AZA
                away_goals += 1
                
            new_score = f"{home_goals}x{away_goals}"
            
            # üî• CORRE√á√ÉO: Usar approach diferente para atualizar
            # Em vez de modificar diretamente, usar callback ou recriar contexto
            return new_score
            
        except Exception as e:
            st.error(f"‚ùå Erro ao atualizar placar: {e}")
            return "0x0"

    def _update_match_context_after_goal(self, goal_type: str, minute: int, current_score: str):
        """Atualiza o contexto da partida ap√≥s gol"""
        try:
            if hasattr(self, 'current_match_context'):
                self.current_match_context.current_score = current_score
                self.current_match_context.minute = minute
                self.current_match_context.event_type = MatchEvent.FAV_GOAL if goal_type == "FAV" else MatchEvent.AZA_GOAL
                self.current_match_context.momentum = "FAV" if goal_type == "FAV" else "AZA"
                self.current_match_context.additional_notes = f"Gol do {'FAVORITO' if goal_type == 'FAV' else 'AZAR√ÉO'} aos {minute}' - Placar: {current_score}"
        except Exception as e:
            st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel atualizar contexto: {e}")
    
    def get_minute_analysis(self, minute: int, current_score: str, odds_values: Dict):
        """Obt√©m an√°lise baseada no minuto atual"""
        return self.minute_analyzer.get_favorable_odds_by_minute(minute, current_score, odds_values)
    
    def get_protection_recommendations(self, match_context: MatchContext, current_profits: Dict, odds_values: Dict):
        """Obt√©m recomenda√ß√µes de prote√ß√£o din√¢mica"""
        return self.protection_system.recommend_protection_strategy(match_context, current_profits, odds_values)
    
    def generate_protection_prompt(self, zero_profit: float, fav_profit: float, aza_profit: float,
                                 odds_values: Dict, minute: int, current_score: str, statistics: Dict) -> str:
        """Gera prompt para an√°lise de prote√ß√£o"""
        return self.prompt_generator.generate_standard_protection_prompt(
            zero_profit, fav_profit, aza_profit, odds_values, minute, current_score, statistics
        )
    
    def generate_goal_analysis_prompt(self, goal_type: str, minute: int, current_score: str,
                                    current_profits: Dict, odds_values: Dict) -> str:
        """Gera prompt para an√°lise p√≥s-gol - VERS√ÉO CORRIGIDA"""
        
        # üî• GARANTIR que o placar est√° atualizado
        if current_score == "0x0":
            # Se ainda est√° 0x0, atualizar baseado no gol
            if goal_type == "FAV":
                current_score = "1x0"
            else:
                current_score = "0x1"
        
        return self.prompt_generator.generate_goal_analysis_prompt(
            goal_type, minute, current_score, current_profits, odds_values
        )
    
    def apply_ia_strategy(self, zero_profit: float, fav_profit: float, aza_profit: float, 
                         odds_values: Dict, total_investment: float = 100, 
                         match_context: MatchContext = None) -> Tuple[float, List[HedgeBet], IAAnalysis]:
        """Aplica estrat√©gia da IA com sincroniza√ß√£o completa"""
        
        # Iniciar nova opera√ß√£o
        profits = {"0x0": zero_profit, "1x1_FAV": fav_profit, "1x1_AZA": aza_profit}
        operation_id = self.memory_manager.start_new_operation(
            "Hedge Din√¢mico IA", profits, total_investment, match_context
        )
        
        # Obter an√°lise da IA
        ia_analysis = self.ia_analyzer.analyze_current_situation(
            zero_profit, fav_profit, aza_profit, total_investment, match_context, odds_values
        )
        self.memory_manager.save_ia_analysis(ia_analysis)
        
        # Salvar prompts
        for prompt in ia_analysis.prompt_suggestions:
            self.memory_manager.add_generated_prompt(prompt)
        self.memory_manager.add_generated_prompt(ia_analysis.comprehensive_prompt)
        
        # Aplicar estrat√©gia baseada no perfil
        if ia_analysis.profile == RiskProfile.MODERATE:
            kept_profit, hedge_bets = self._apply_moderate_strategy(zero_profit, fav_profit, aza_profit, odds_values, total_investment, match_context)
        elif ia_analysis.profile == RiskProfile.CONSERVATIVE:
            kept_profit, hedge_bets = self._apply_conservative_strategy(zero_profit, fav_profit, aza_profit, odds_values, total_investment, match_context)
        else:
            kept_profit, hedge_bets = self._apply_aggressive_strategy(zero_profit, fav_profit, aza_profit, odds_values, total_investment, match_context)
        
        # Salvar opera√ß√£o
        self.memory_manager.save_hedge_bets(hedge_bets)
        self.memory_manager.add_learning_note(f"Estrat√©gia {ia_analysis.profile.value} aplicada")
        self.memory_manager.add_learning_note("Prote√ß√£o Mais 0,5 Gols Azar√£o implementada")
        
        self.current_hedge_bets = hedge_bets
        self.applied_strategy = f"IA_{ia_analysis.profile.value}"
        
        return kept_profit, hedge_bets, ia_analysis
    
    def _apply_moderate_strategy(self, zero_profit: float, fav_profit: float, aza_profit: float, 
                               odds_values: Dict, total_investment: float, match_context: MatchContext) -> Tuple[float, List[HedgeBet]]:
        """Estrat√©gia moderada"""
        bets = []
        max_hedge = total_investment * 0.3
        
        # Aposta principal: Mais 0,5 Gols Azar√£o
        main_bet = HedgeBet(
            "Prote√ß√£o Mais 0,5 Gols Azar√£o",
            max_hedge * 0.5,
            odds_values.get("Mais 0,5 Gols Azar√£o", 2.1),
            "Prote√ß√£o principal - cobre empates 1x1, vit√≥rias 2x1, qualquer gol azar√£o",
            "Mais 0,5 Gols Azar√£o",
            0.5
        )
        bets.append(main_bet)
        
        # Prote√ß√£o adicional
        protection_bet = HedgeBet(
            "Prote√ß√£o Balanceada",
            max_hedge * 0.3,
            odds_values.get("Dupla Chance 1X", 1.8),
            "Prote√ß√£o adicional do investimento",
            "Dupla Chance",
            0.3
        )
        bets.append(protection_bet)
        
        # Oportunidade
        opportunity_bet = HedgeBet(
            "Oportunidade Moderada",
            max_hedge * 0.2,
            odds_values.get("Ambas Marcam - N√£o", 2.0),
            "Aproveitamento de valor moderado",
            "Ambas Marcam",
            0.2
        )
        bets.append(opportunity_bet)
        
        kept_profit = max(zero_profit, fav_profit, aza_profit, 0) * 0.5
        return kept_profit, bets
    
    def _apply_conservative_strategy(self, zero_profit: float, fav_profit: float, aza_profit: float, 
                                   odds_values: Dict, total_investment: float, match_context: MatchContext) -> Tuple[float, List[HedgeBet]]:
        """Estrat√©gia conservadora"""
        bets = []
        max_hedge = total_investment * 0.2
        
        # Aposta principal
        main_bet = HedgeBet(
            "Prote√ß√£o M√°xima Mais 0,5 Gols Azar√£o",
            max_hedge * 0.7,
            odds_values.get("Mais 0,5 Gols Azar√£o", 2.1),
            "Prote√ß√£o conservadora principal",
            "Mais 0,5 Gols Azar√£o",
            0.7
        )
        bets.append(main_bet)
        
        # Backup
        secondary_bet = HedgeBet(
            "Backup Seguro",
            max_hedge * 0.3,
            odds_values.get("Dupla Chance 1X", 1.8),
            "Prote√ß√£o adicional conservadora",
            "Dupla Chance",
            0.3
        )
        bets.append(secondary_bet)
        
        kept_profit = max(zero_profit, fav_profit, aza_profit, 0) * 0.7
        return kept_profit, bets
    
    def _apply_aggressive_strategy(self, zero_profit: float, fav_profit: float, aza_profit: float, 
                                 odds_values: Dict, total_investment: float, match_context: MatchContext) -> Tuple[float, List[HedgeBet]]:
        """Estrat√©gia agressiva"""
        bets = []
        max_hedge = total_investment * 0.4
        
        # Aposta agressiva
        aggressive_bet = HedgeBet(
            "Oportunidade Agressiva Mais 0,5 Gols Azar√£o",
            max_hedge * 0.6,
            odds_values.get("Mais 0,5 Gols Azar√£o", 2.1),
            "Busca por maximiza√ß√£o agressiva",
            "Mais 0,5 Gols Azar√£o",
            0.6
        )
        bets.append(aggressive_bet)
        
        # Valor m√©dio
        medium_bet = HedgeBet(
            "Valor M√©dio",
            max_hedge * 0.25,
            odds_values.get("Dupla Chance X2", 2.5),
            "Aproveitamento de valor m√©dio",
            "Dupla Chance",
            0.25
        )
        bets.append(medium_bet)
        
        # Prote√ß√£o m√≠nima
        small_protection = HedgeBet(
            "Prote√ß√£o M√≠nima",
            max_hedge * 0.15,
            odds_values.get("N√£o Sair Gols", 3.0),
            "Prote√ß√£o b√°sica",
            "Clean Sheet",
            0.15
        )
        bets.append(small_protection)
        
        kept_profit = max(zero_profit, fav_profit, aza_profit, 0) * 0.1
        return kept_profit, bets

    def get_strategy_summary(self) -> Dict:
        """Retorna resumo da estrat√©gia aplicada"""
        if not self.current_hedge_bets:
            return {}
        
        total_invested = sum(b.amount for b in self.current_hedge_bets)
        expected_return = sum(b.amount * b.odds for b in self.current_hedge_bets)
        
        azarao_investment = sum(b.amount for b in self.current_hedge_bets if "Mais 0,5 Gols Azar√£o" in b.bet_type)
        azarao_percentage = (azarao_investment / total_invested * 100) if total_invested > 0 else 0
        
        return {
            "strategy": self.applied_strategy or "Nenhuma",
            "total_hedge_investment": total_invested,
            "expected_return": expected_return,
            "expected_profit": expected_return - total_invested,
            "azarao_protection_investment": azarao_investment,
            "azarao_protection_percentage": azarao_percentage,
            "hedge_bets": [
                {
                    "type": b.bet_type,
                    "amount": b.amount,
                    "odds": b.odds,
                    "market": b.market,
                    "stake_percentage": b.stake_percentage,
                    "description": b.description
                }
                for b in self.current_hedge_bets
            ]
        }
    
    def get_current_operation_id(self) -> Optional[str]:
        return self.memory_manager.current_operation_id
    
    def get_operation_summary(self, operation_id: str) -> Optional[Dict]:
        operation = self.memory_manager.get_operation_by_id(operation_id)
        if not operation:
            return None
        
        total_hedge_investment = sum(b.amount for b in operation.hedge_bets) if operation.hedge_bets else 0
        expected_return = sum(b.amount * b.odds for b in operation.hedge_bets) if operation.hedge_bets else 0
        
        azarao_investment = sum(b.amount for b in operation.hedge_bets if "Mais 0,5 Gols Azar√£o" in b.bet_type) if operation.hedge_bets else 0
        azarao_percentage = (azarao_investment / total_hedge_investment * 100) if total_hedge_investment > 0 else 0
        
        return {
            "operation_id": operation.operation_id,
            "timestamp": operation.timestamp,
            "scenario": operation.scenario,
            "status": operation.status.value,
            "total_investment": operation.total_investment,
            "total_hedge_investment": total_hedge_investment,
            "expected_profit": expected_return - total_hedge_investment,
            "azarao_protection_investment": azarao_investment,
            "azarao_protection_percentage": azarao_percentage,
            "match_context": {
                "current_score": operation.match_context.current_score if operation.match_context else "N/A",
                "minute": operation.match_context.minute if operation.match_context else "N/A",
                "event_type": operation.match_context.event_type.value if operation.match_context else "N/A",
                "momentum": operation.match_context.momentum if operation.match_context else "N/A"
            } if operation.match_context else None,
            "ia_analysis": {
                "profile": operation.ia_analysis.profile.value if operation.ia_analysis else "N/A",
                "strategy": operation.ia_analysis.recommended_strategy if operation.ia_analysis else "N/A",
                "confidence": operation.ia_analysis.confidence if operation.ia_analysis else 0,
                "action_plan": operation.ia_analysis.action_plan if operation.ia_analysis else [],
            } if operation.ia_analysis else None,
            "hedge_bets": [
                {
                    "type": b.bet_type,
                    "amount": b.amount,
                    "odds": b.odds,
                    "market": b.market,
                    "description": b.description
                }
                for b in operation.hedge_bets
            ] if operation.hedge_bets else [],
            "learning_notes": operation.learning_notes or []
        }

# =============================
# FUN√á√ÉO PARA COPIAR TEXTO - VERS√ÉO SIMPLIFICADA
# =============================

def copy_to_clipboard(text: str):
    """Copia texto para √°rea de transfer√™ncia - Vers√£o Simplificada"""
    try:
        # Tenta usar pyperclip primeiro
        import pyperclip
        pyperclip.copy(text)
        st.toast("‚úÖ Prompt copiado para a √°rea de transfer√™ncia!")
        st.success("üìã **Texto copiado com sucesso!**")
        return True
    except:
        # Fallback: mostra o texto com op√ß√£o de copiar
        st.warning("üîß **Instale o pyperclip para copiar automaticamente**")
        st.info("üí° **Comando no terminal:** `pip install pyperclip`")
        
        # Cria uma √°rea de texto edit√°vel para facilitar a c√≥pia
        st.text_area("üìã **Copie o prompt abaixo:**", value=text, height=300)
        
        # Bot√£o para recarregar ap√≥s instala√ß√£o
        if st.button("üîÑ Recarregar ap√≥s instala√ß√£o", key="reload_after_install"):
            st.rerun()
        
        return False
    
# =============================
# INTERFACE APRIMORADA
# =============================

def init_hedge_state():
    """Inicializa o estado do hedge manager"""
    if "hedge_manager" not in st.session_state:
        st.session_state.hedge_manager = DynamicHedgeManager()
    if "hedge_applied" not in st.session_state:
        st.session_state.hedge_applied = False
    if "current_operation_id" not in st.session_state:
        st.session_state.current_operation_id = None
    if "match_context" not in st.session_state:
        st.session_state.match_context = None
    if "goal_events" not in st.session_state:
        st.session_state.goal_events = []
    if "current_prompt" not in st.session_state:
        st.session_state.current_prompt = ""

def render_enhanced_hedge_controls(zero_profit: float, fav_profit: float, aza_profit: float, odds_values: Dict):
    """Interface aprimorada com an√°lise de minutos e prote√ß√µes din√¢micas"""
    
    st.info("""
    **üéØ INSTRU√á√ïES APRIMORADAS:**
    1. Configure as odds principais na aba 'Configura√ß√£o'
    2. Aplique as estrat√©gias desejadas  
    3. Use esta aba para prote√ß√µes din√¢micas durante a partida
    4. **NOVO:** An√°lise autom√°tica por minuto e prote√ß√µes inteligentes
    """)
    
    # M√©tricas principais
    st.subheader("üìä Situa√ß√£o Atual")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Lucro 0x0", f"R$ {zero_profit:.2f}")
    with col2:
        st.metric("Lucro 1x1 FAV", f"R$ {fav_profit:.2f}")
    with col3:
        st.metric("Lucro 1x1 AZA", f"R$ {aza_profit:.2f}")

    total_investment = abs(zero_profit) + abs(fav_profit) + abs(aza_profit)
    
    # ‚úÖ VERS√ÉO CORRIGIDA - SEM DUPLICA√á√ÉO
    st.subheader("‚è∞ Configura√ß√£o do Momento da Partida")

    col_placar = st.columns([2, 1])
    with col_placar[0]:
        minute = st.number_input("Minuto da Partida:", min_value=1, max_value=120, value=1, key="current_minute_dyn")
        current_score = st.selectbox("Placar Atual:", ["0x0", "1x0", "0x1", "1x1", "2x0", "0x2", "2x1", "1x2", "2x2"], key="current_score_dyn")

    with col_placar[1]:
        current_score_display = st.session_state.get('current_score_dyn', '0x0')
        st.info(f"üèÜ **PLACAR ATUAL:** {current_score_display}")
        
        if st.button("üîÑ Resetar Placar", key="reset_placar"):
            st.session_state.current_score_dyn = "0x0"
            st.rerun()

    # ‚úÖ REMOVA ESTE BLOCO DUPLICADO COMPLETAMENTE:
    # col1, col2, col3 = st.columns(3)
    # with col1:
    #     minute = st.number_input("Minuto da Partida:", min_value=1, max_value=120, value=1, key="current_minute_dyn")
    #     current_score = st.selectbox("Placar Atual:", ["0x0", "1x0", "0x1", "1x1", "2x0", "0x2", "2x1", "1x2", "2x2"], key="current_score_dyn")

    # ‚úÖ MANTENHA APENAS AS ESTAT√çSTICAS (col2 e col3 originais)
    col2, col3 = st.columns(2)

    with col2:
        st.markdown("**üìà Estat√≠sticas do Azar√£o**")
        shots_aza = st.number_input("Finaliza√ß√µes Azar√£o:", min_value=0, value=0, key="shots_aza_dyn")
        shots_on_target_aza = st.number_input("Finaliza√ß√µes no Alvo:", min_value=0, value=0, key="shots_target_aza_dyn")
        dangerous_attacks_aza = st.number_input("Ataques Perigosos:", min_value=0, value=0, key="attacks_aza_dyn")

    with col3:
        st.markdown("**üéØ An√°lise por Minuto**")
        if st.button("üîç Analisar Odds por Minuto", use_container_width=True, key="analisar_minuto"):
            if "hedge_manager" in st.session_state:
                analysis = st.session_state.hedge_manager.get_minute_analysis(minute, current_score, odds_values)
                
                st.success(f"**Faixa {analysis['minute_range']}:** {analysis['range_description']}")
                st.info(f"**Foco:** {analysis['focus']}")
                
                if analysis['favorable_odds']:
                    for market, info in analysis['favorable_odds'].items():
                        st.write(f"{info['rating']} **{market}:** {info['odd']:.2f} - {info['reason']}")
                else:
                    st.warning("Nenhuma odd favor√°vel identificada neste minuto")

    # Configura√ß√£o de Odds para Hedge
    st.subheader("‚öôÔ∏è Odds para Prote√ß√£o")
    
    default_odds = {
        "Mais 0,5 Gols Azar√£o": 2.10,
        "Dupla Chance 1X": 1.80,
        "Dupla Chance X2": 1.91,
        "Ambas Marcam - N√£o": 2.00,
        "N√£o Sair Gols": 3.00,
        "Mais 2,5 Gols": 2.20,
        "Menos 2,5 Gols": 1.65
    }
    
    final_odds = odds_values.copy() if odds_values else {}
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üõ°Ô∏è Prote√ß√µes Principais**")
        for bet_type in ["Mais 0,5 Gols Azar√£o", "Dupla Chance 1X", "Dupla Chance X2"]:
            default_odd = default_odds.get(bet_type, 2.0)
            current_odd = final_odds.get(bet_type, default_odd)
            
            final_odds[bet_type] = st.number_input(
                f"{bet_type}", 
                value=float(current_odd), 
                min_value=1.1, 
                max_value=10.0, 
                step=0.1,
                key=f"hedge_odd_{bet_type}",
                help="Protege empates 1x1, vit√≥rias 2x1, qualquer cen√°rio com gol do azar√£o" if "Azar√£o" in bet_type else ""
            )
    
    with col2:
        st.markdown("**üéØ Prote√ß√µes Adicionais**")
        for bet_type in ["Ambas Marcam - N√£o", "N√£o Sair Gols", "Mais 2,5 Gols", "Menos 2,5 Gols"]:
            default_odd = default_odds.get(bet_type, 2.0)
            current_odd = final_odds.get(bet_type, default_odd)
            
            final_odds[bet_type] = st.number_input(
                f"{bet_type}", 
                value=float(current_odd), 
                min_value=1.1, 
                max_value=10.0, 
                step=0.1,
                key=f"hedge_odd_{bet_type}"
            )

    # NOVO: Eventos em Tempo Real com An√°lise de Retorno
    st.subheader("‚öΩ Eventos da Partida com An√°lise de Retorno")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("ü•Ö Gol do FAVORITO", use_container_width=True, type="secondary", key="gol_fav_corrigido"):
            tempo_gol = st.number_input("Minuto do gol:", min_value=1, max_value=120, value=25, key="tempo_gol_fav_corrigido")
            
            # Registrar evento e mostrar an√°lise
            current_profits = {"0x0": zero_profit, "1x1_FAV": fav_profit, "1x1_AZA": aza_profit}
            event = st.session_state.hedge_manager.register_goal_event("FAV", tempo_gol, current_profits)
            
            if event:
                st.success(f"‚úÖ Gol do FAVORITO registrado aos {tempo_gol} minutos")
                st.info(f"üìä **Placar Atualizado:** {event['current_score']}")
                
                # Gerar prompt para IA
                prompt = st.session_state.hedge_manager.generate_goal_analysis_prompt(
                    "FAV", tempo_gol, event['current_score'], current_profits, final_odds
                )
                st.session_state.current_prompt = prompt
                
                # Mostrar an√°lise de retorno
                analysis = event['analysis']
                st.info(f"""
                **üìä An√°lise P√≥s-Gol:**
                - **Cen√°rio:** {analysis['scenario']}
                - **Retorno Protegido:** R$ {analysis['returns_breakdown']['protected_profit']:.2f}
                - **Risco:** {analysis['risk_level']}
                - **Recomenda√ß√£o:** {analysis['recommendation']}
                """)
    
    with col2:
        if st.button("ü•Ö Gol do AZAR√ÉO", use_container_width=True, type="secondary", key="gol_aza_corrigido"):
            tempo_gol = st.number_input("Minuto do gol:", min_value=1, max_value=120, value=25, key="tempo_gol_aza_corrigido")
            
            # Registrar evento e mostrar an√°lise
            current_profits = {"0x0": zero_profit, "1x1_FAV": fav_profit, "1x1_AZA": aza_profit}
            event = st.session_state.hedge_manager.register_goal_event("AZA", tempo_gol, current_profits)
            
            if event:
                st.success(f"‚úÖ Gol do AZAR√ÉO registrado aos {tempo_gol} minutos")
                st.info(f"üìä **Placar Atualizado:** {event['current_score']}")
                
                # Gerar prompt para IA
                prompt = st.session_state.hedge_manager.generate_goal_analysis_prompt(
                    "AZA", tempo_gol, event['current_score'], current_profits, final_odds
                )
                st.session_state.current_prompt = prompt
                
                # Mostrar an√°lise de retorno
                analysis = event['analysis']
                st.info(f"""
                **üìä An√°lise P√≥s-Gol:**
                - **Cen√°rio:** {analysis['scenario']}
                - **Retorno Protegido:** R$ {analysis['returns_breakdown']['protected_profit']:.2f}
                - **Risco:** {analysis['risk_level']}
                - **Recomenda√ß√£o:** {analysis['recommendation']}
                """)

    # NOVO: Sistema de Prote√ß√µes Din√¢micas - CORRE√á√ÉO CR√çTICA
    st.subheader("üõ°Ô∏è Sistema de Prote√ß√µes Din√¢micas")
    
    # Criar contexto de partida para an√°lise
    match_stats = MatchStatistics(
        possession_fav=55, possession_aza=45,
        shots_fav=8, shots_aza=shots_aza,
        shots_on_target_fav=3, shots_on_target_aza=shots_on_target_aza,
        dangerous_attacks_fav=12, dangerous_attacks_aza=dangerous_attacks_aza,
        corners_fav=5, corners_aza=3,
        fouls_fav=8, fouls_aza=10,
        offsides_fav=2, offsides_aza=1,
        yellow_cards_fav=1, yellow_cards_aza=2,
        red_cards_fav=0, red_cards_aza=0
    )
    
    match_context = MatchContext(
        current_score=current_score,
        minute=minute,
        statistics=match_stats,
        event_type=MatchEvent.MATCH_START,
        momentum="EQUILIBRADO",
        additional_notes=f"An√°lise em tempo real - Minuto {minute}"
    )
    
    current_profits = {"0x0": zero_profit, "1x1_FAV": fav_profit, "1x1_AZA": aza_profit}
    
    # üî• CORRE√á√ÉO: BOT√ÉO DE RECOMENDA√á√ïES SEMPRE GERA PROMPT
    if st.button("üéØ Obter Recomenda√ß√µes de Prote√ß√£o", use_container_width=True, key="obter_recomendacoes_protecao"):
        
        # üî• SEMPRE GERAR PROMPT DE PROTE√á√ÉO (INDEPENDENTE DE GOL)
        statistics_dict = {
            'shots_aza': shots_aza,
            'shots_on_target_aza': shots_on_target_aza,
            'dangerous_attacks_aza': dangerous_attacks_aza,
            'corners_aza': 3
        }
        
        # Verificar se est√° usando an√°lise do Conquistador
        use_analise_conquistador = st.session_state.get('usar_analise_conquistador', False)
        
        # Gerar prompt de prote√ß√£o autom√°tico
        prompt = st.session_state.hedge_manager.generate_automatic_protection_prompt(
            zero_profit, fav_profit, aza_profit, final_odds, minute, current_score, 
            statistics_dict, use_analise_conquistador
        )
        
        # Armazenar prompt no session_state
        st.session_state.current_prompt = prompt
        
        # Obter recomenda√ß√µes (se dispon√≠veis)
        try:
            recommendations = st.session_state.hedge_manager.get_protection_recommendations(
                match_context, current_profits, final_odds
            )
            
            if recommendations and recommendations['top_recommendation']:
                top_rec = recommendations['top_recommendation']
                st.success(f"**üéØ Estrat√©gia Recomendada:** {top_rec['name']}")
                st.info(f"**üìä Confian√ßa:** {top_rec['confidence']:.0%} | **Motivo:** {top_rec['reason']}")
                
                st.markdown("**üí° Mercados Recomendados:**")
                for market in top_rec['recommended_markets']:
                    if market in final_odds:
                        st.write(f"- {market}: Odd {final_odds[market]:.2f}")
            else:
                st.info("‚ÑπÔ∏è **Recomenda√ß√£o Padr√£o:** Prote√ß√£o com Mais 0,5 Gols Azar√£o + Dupla Chance X2")
                st.write("- **üéØ Mais 0,5 Gols Azar√£o:** Prote√ß√£o principal para cen√°rios com gol do azar√£o")
                st.write("- **üõ°Ô∏è Dupla Chance X2:** Prote√ß√£o adicional para empates e vit√≥rias do azar√£o")
                
        except Exception as e:
            st.info("‚ÑπÔ∏è **Recomenda√ß√£o Autom√°tica Ativada:**")
            st.write("- **üéØ Foco em Mais 0,5 Gols Azar√£o** para proteger cen√°rios com gol do azar√£o")
            st.write("- **üõ°Ô∏è Dupla Chance X2** como prote√ß√£o secund√°ria")
            st.write(f"- **‚è∞ Minuto {minute}':** Timing adequado para prote√ß√µes din√¢micas")
        
        # üî• MENSAGEM DE SUCESSO DO PROMPT
        st.success("‚úÖ **Prompt de prote√ß√£o gerado automaticamente!**")
        st.info("üìã Role para baixo para visualizar e copiar o prompt completo para IA")
        
        # For√ßar exibi√ß√£o do prompt
        st.session_state.mostrar_prompt = True
        
    # Aplica√ß√£o da Estrat√©gia
    st.subheader("üöÄ Aplicar Prote√ß√£o Din√¢mica")
    
    if st.button("‚úÖ APLICAR HEDGE COM PROTE√á√ÉO AZAR√ÉO", type="primary", use_container_width=True):
        with st.spinner("Executando estrat√©gia de prote√ß√£o din√¢mica..."):
            try:
                kept_profit, hedge_bets, ia_analysis = st.session_state.hedge_manager.apply_ia_strategy(
                    zero_profit, fav_profit, aza_profit, final_odds, total_investment, match_context
                )
                
                st.session_state.hedge_applied = True
                st.session_state.current_operation_id = st.session_state.hedge_manager.get_current_operation_id()
                
                st.success("üéâ **PROTE√á√ÉO APLICADA COM SUCESSO!**")
                
                azarao_investment = sum(b.amount for b in hedge_bets if "Mais 0,5 Gols Azar√£o" in b.bet_type)
                total_hedge = sum(b.amount for b in hedge_bets)
                azarao_percentage = (azarao_investment / total_hedge * 100) if total_hedge > 0 else 0
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Lucro Garantido", f"R$ {kept_profit:.2f}")
                with col2:
                    st.metric("Total Hedge", f"R$ {total_hedge:.2f}")
                with col3:
                    st.metric("Prote√ß√£o Azar√£o", f"R$ {azarao_investment:.2f}")
                with col4:
                    st.metric("% Prote√ß√£o", f"{azarao_percentage:.1f}%")
                
                # Mostrar an√°lise da IA
                st.markdown("### üß† An√°lise da IA Aplicada")
                st.write(f"**Perfil:** {ia_analysis.profile.value}")
                st.write(f"**Confian√ßa:** {ia_analysis.confidence:.0%}")
                st.write(f"**Estrat√©gia:** {ia_analysis.recommended_strategy}")
                
                st.markdown("**üìã Plano de A√ß√£o:**")
                for action in ia_analysis.action_plan:
                    st.write(f"- {action}")
                
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå Erro ao aplicar prote√ß√£o: {e}")

    # üî• MELHORIA: EXIBI√á√ÉO AUTOM√ÅTICA DO PROMPT GERADO
    if st.session_state.get('current_prompt') and st.session_state.get('mostrar_prompt', False):
        st.markdown("---")
        st.subheader("ü§ñ Prompt Gerado para IA")
        
        with st.expander("üìã Visualizar Prompt Completo", expanded=True):
            st.markdown(st.session_state.current_prompt)
        
        # Bot√£o para copiar prompt
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üìã Copiar Prompt para IA", use_container_width=True, key="copiar_prompt_geral"):
                copy_to_clipboard(st.session_state.current_prompt)
        with col2:
            if st.button("üíæ Salvar Prompt", use_container_width=True, key="salvar_prompt_geral"):
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"prompt_ia_{timestamp}.txt"
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(st.session_state.current_prompt)
                st.success(f"Prompt salvo como {filename}")
        with col3:
            if st.button("üîÑ Gerar Novo Prompt", use_container_width=True, key="gerar_novo_prompt"):
                # Limpar prompt atual para for√ßar nova gera√ß√£o
                st.session_state.current_prompt = None
                st.session_state.mostrar_prompt = False
                st.rerun()
                
# =============================
# üÜï FUN√á√ÉO PARA GERAR PROMPT AUTOM√ÅTICO DE PROTE√á√ÉO
# =============================

# =============================
# üÜï FUN√á√ïES AUXILIARES PARA GERA√á√ÉO AUTOM√ÅTICA DE PROMPTS
# =============================

def gerar_prompt_automatico_protecao(zero_profit: float, fav_profit: float, aza_profit: float,
                                   odds_values: Dict, minute: int, current_score: str,
                                   statistics: Dict, use_analise_conquistador: bool = False) -> str:
    """Gera prompt autom√°tico de prote√ß√£o baseado na situa√ß√£o atual"""
    
    # Calcular m√©tricas de risco
    profits = [zero_profit, fav_profit, aza_profit]
    max_profit = max(profits)
    min_profit = min(profits)
    volatilidade = abs(max_profit - min_profit)
    
    # Determinar n√≠vel de risco
    if volatilidade < 5:
        nivel_risco = "BAIXO"
        estrategia_base = "Prote√ß√£o Conservadora"
    elif volatilidade < 15:
        nivel_risco = "MODERADO" 
        estrategia_base = "Hedge Balanceado"
    else:
        nivel_risco = "ALTO"
        estrategia_base = "Prote√ß√£o Agressiva"
    
    # Verificar se h√° an√°lise do Sistema Conquistador dispon√≠vel
    info_analise = {}
    if use_analise_conquistador and hasattr(st.session_state, 'ultima_analise_transmitida'):
        info_analise = st.session_state.ultima_analise_transmitida['informacoes_extraidas']
    
    prompt = f"""
## üõ°Ô∏è AN√ÅLISE DE PROTE√á√ÉO DIN√ÇMICA - GERADO AUTOMATICAMENTE

### üìä CONTEXTO DA PARTIDA
- **Minuto:** {minute}'
- **Placar:** {current_score}
- **Momento:** {'Primeiro Tempo' if minute <= 45 else 'Segundo Tempo'}
- **N√≠vel de Risco Identificado:** {nivel_risco}

### üí∞ SITUA√á√ÉO FINANCEIRA
- **Lucro 0x0:** R$ {zero_profit:.2f}
- **Lucro 1x1 FAV:** R$ {fav_profit:.2f} 
- **Lucro 1x1 AZA:** R$ {aza_profit:.2f}
- **Volatilidade:** R$ {volatilidade:.2f} ({nivel_risco})

### üìà ESTAT√çSTICAS DO AZAR√ÉO
- **Finaliza√ß√µes:** {statistics.get('shots_aza', 0)}
- **Finaliza√ß√µes no Alvo:** {statistics.get('shots_on_target_aza', 0)}
- **Ataques Perigosos:** {statistics.get('dangerous_attacks_aza', 0)}
- **Probabilidade Estimada de Gol:** {calcular_probabilidade_azarao(statistics, minute):.1f}%

### üé∞ ODDS DISPON√çVEIS
"""
    
    # Adicionar odds com destaque para prote√ß√£o azar√£o
    for market, odd in odds_values.items():
        if "Mais 0,5 Gols Azar√£o" in market:
            prompt += f"- **üéØ {market}:** {odd:.2f} ‚≠ê (PROTE√á√ÉO PRINCIPAL)\n"
        elif any(prot in market for prot in ["Dupla Chance", "Ambas Marcam - N√£o"]):
            prompt += f"- **üõ°Ô∏è {market}:** {odd:.2f} (PROTE√á√ÉO SECUND√ÅRIA)\n"
        else:
            prompt += f"- **{market}:** {odd:.2f}\n"
    
    # Adicionar informa√ß√µes da an√°lise do Conquistador se dispon√≠vel
    if info_analise:
        prompt += f"""
### üìã AN√ÅLISE DO SISTEMA CONQUISTADOR
- **Cen√°rio Principal:** {info_analise.get('cenario_principal', 'N√£o identificado')}
- **Confian√ßa:** {info_analise.get('confianca_cenario', 'Moderada')}
- **Estilo do Favorito:** {info_analise.get('estilo_jogo_favorito', 'Equilibrado')}
- **Probabilidade Azar√£o Marcar:** {info_analise.get('probabilidade_azarao_marcar', 50.0)}%
"""
    
    prompt += f"""
### üß† SOLICITA√á√ÉO DE AN√ÅLISE DE PROTE√á√ÉO

Baseado no contexto acima (minuto {minute}', placar {current_score}, risco {nivel_risco}), forne√ßa:

1. **ESTRAT√âGIA DE PROTE√á√ÉO {estrategia_base.upper()}:**
   - Aloca√ß√£o ideal para Mais 0,5 Gols Azar√£o
   - Prote√ß√µes complementares necess√°rias
   - Propor√ß√£o de hedge vs. exposi√ß√£o

2. **AN√ÅLISE DE VALOR:**
   - Odds com melhor rela√ß√£o risco-retorno
   - Timing ideal para implementa√ß√£o
   - Tamanho de posi√ß√£o recomendado

3. **PLANO DE PROTE√á√ÉO POR CEN√ÅRIO:**
   - Prote√ß√£o para empates 1x1
   - Prote√ß√£o para vit√≥rias 2x1 do favorito  
   - Prote√ß√£o para qualquer gol do azar√£o
   - Exposi√ß√£o residual aceit√°vel

4. **GEST√ÉO TEMPORAL:**
   - Ajustes baseados no minuto {minute}'
   - Gatilhos para modifica√ß√µes
   - Condi√ß√µes de sa√≠da

**Forne√ßa recomenda√ß√µes espec√≠ficas e acion√°veis para prote√ß√£o proporcional aos valores distribu√≠dos.**
"""
    
    return prompt

def calcular_probabilidade_azarao(statistics: Dict, minute: int) -> float:
    """Calcula probabilidade estimada do azar√£o marcar"""
    base_prob = 35.0
    
    # Ajustes baseados em estat√≠sticas
    shots_aza = statistics.get('shots_aza', 0)
    shots_on_target_aza = statistics.get('shots_on_target_aza', 0)
    dangerous_attacks_aza = statistics.get('dangerous_attacks_aza', 0)
    
    if shots_on_target_aza > 0:
        base_prob += shots_on_target_aza * 8
    
    if dangerous_attacks_aza > 5:
        base_prob += (dangerous_attacks_aza - 5) * 2
    
    # Ajuste temporal
    if minute > 60:
        base_prob += 15
    elif minute > 30:
        base_prob += 8
    
    return min(85.0, base_prob)

def render_hedge_results():
    """Mostra resultados das opera√ß√µes de hedge aplicadas"""
    if not st.session_state.hedge_applied:
        return

    st.subheader("üìä Resultados da Prote√ß√£o Aplicada")
    
    current_op_id = st.session_state.current_operation_id
    if not current_op_id:
        st.info("Nenhuma opera√ß√£o de prote√ß√£o ativa")
        return
        
    operation_summary = st.session_state.hedge_manager.get_operation_summary(current_op_id)
    
    if not operation_summary:
        st.info("Opera√ß√£o n√£o encontrada")
        return

    # Detalhes da opera√ß√£o
    st.markdown(f"**Opera√ß√£o:** {operation_summary['operation_id']}")
    st.markdown(f"**In√≠cio:** {operation_summary['timestamp'].strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Resumo
    summary = st.session_state.hedge_manager.get_strategy_summary()
    
    if summary:
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Estrat√©gia", summary['strategy'])
        with col2:
            st.metric("Total Investido", f"R$ {summary['total_hedge_investment']:.2f}")
        with col3:
            st.metric("Lucro Esperado", f"R$ {summary['expected_profit']:.2f}")
        with col4:
            st.metric("Prote√ß√£o Azar√£o", f"{summary['azarao_protection_percentage']:.1f}%")

    # Instru√ß√µes da IA
    if operation_summary['ia_analysis']:
        st.markdown("### üìã Plano de A√ß√£o da IA")
        for instruction in operation_summary['ia_analysis']['action_plan']:
            if "Mais 0,5 Gols Azar√£o" in instruction:
                st.write(f"üéØ **{instruction}**")
            else:
                st.write(f"üìç {instruction}")

    # Apostas aplicadas
    if operation_summary['hedge_bets']:
        st.markdown("### üí∞ Apostas de Prote√ß√£o Aplicadas")
        
        bets_data = []
        for bet in operation_summary['hedge_bets']:
            highlight = "üéØ" if "Mais 0,5 Gols Azar√£o" in bet['type'] else ""
            bets_data.append({
                'Mercado': f"{highlight} {bet['market']}",
                'Tipo': bet['type'],
                'Valor': f"R$ {bet['amount']:.2f}",
                'Odd': bet['odds'],
                'Retorno': f"R$ {bet['amount'] * bet['odds']:.2f}",
                'Descri√ß√£o': bet['description']
            })
        
        df = pd.DataFrame(bets_data)
        st.dataframe(df, use_container_width=True)

# =============================
# FUN√á√ïES DE INTEGRA√á√ÉO
# =============================

def get_current_operation_info() -> Optional[Dict]:
    """Retorna informa√ß√µes da opera√ß√£o atual para integra√ß√£o"""
    if "hedge_manager" not in st.session_state:
        return None
    
    current_op_id = st.session_state.hedge_manager.get_current_operation_id()
    if not current_op_id:
        return None
    
    return st.session_state.hedge_manager.get_operation_summary(current_op_id)

def continue_operation_from_id(operation_id: str) -> bool:
    """Continua uma opera√ß√£o existente"""
    if "hedge_manager" not in st.session_state:
        return False
    
    operation = st.session_state.hedge_manager.memory_manager.get_operation_by_id(operation_id)
    if not operation:
        return False
    
    st.session_state.hedge_manager.memory_manager.current_operation_id = operation_id
    st.session_state.current_operation_id = operation_id
    st.session_state.hedge_applied = True
    
    st.session_state.hedge_manager.current_hedge_bets = operation.hedge_bets
    st.session_state.hedge_manager.applied_strategy = f"Continua√ß√£o_{operation_id}"
    
    return True

# =============================
# COMPATIBILIDADE
# =============================

def render_hedge_controls(zero_profit: float, fav_profit: float, aza_profit: float, odds_values: Dict):
    """Fun√ß√£o principal para renderizar controles de hedge"""
    init_hedge_state()
    render_enhanced_hedge_controls(zero_profit, fav_profit, aza_profit, odds_values)
    
    if st.session_state.hedge_applied:
        render_hedge_results()

def main_hedge_module():
    """Fun√ß√£o principal para teste do m√≥dulo"""
    st.set_page_config(page_title="Hedge Din√¢mico", page_icon="üõ°Ô∏è", layout="wide")
    st.title("üõ°Ô∏è HEDGE DIN√ÇMICO - SISTEMA CONQUISTADOR")
    
    init_hedge_state()
    
    st.sidebar.header("üìä Dados de Entrada")
    zero_profit = st.sidebar.number_input("Lucro 0x0", value=2.27, step=0.1)
    fav_profit = st.sidebar.number_input("Lucro 1x1 FAV", value=-0.98, step=0.1)
    aza_profit = st.sidebar.number_input("Lucro 1x1 AZA", value=-0.98, step=0.1)
    
    render_hedge_controls(zero_profit, fav_profit, aza_profit, {})

if __name__ == "__main__":
    main_hedge_module()
