# ao_vivo.py (VERS√ÉO COMPLETA COM SISTEMA DE RECOMENDA√á√ïES RESTAURADO)
import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
from enum import Enum
from dataclasses import dataclass
from typing import Dict, List, Tuple, Optional
import json
import sys
import os
from datetime import datetime

# =============================================
# üéØ ENUMS E ESTRUTURAS B√ÅSICAS
# =============================================

class BetType(Enum):
    OVER_15_BOTH_NO = "Mais 1.5 & Ambas N√£o"
    EXACT_0_0 = "Resultado 0x0"
    UNDER_25_DC_1X = "Menos 2.5 & Dupla Chance 1X"
    DOUBLE_CHANCE_X2 = "Dupla Chance X2"
    NEXT_GOAL_FAV = "Pr√≥ximo Gol Favorito"
    OVER_15 = "Mais 1.5 Gols"
    OVER_25_DC_12 = "Mais 2.5 & Dupla Chance 12"
    UNDER_15 = "Menos 1.5 Gols"
    VITORIA_FAV = "Vit√≥ria Favorito"

@dataclass
class Bet:
    bet_type: BetType
    investment: float
    odds: float

    @property
    def potential_return(self) -> float:
        return self.investment * self.odds

    @property
    def implied_probability(self) -> float:
        return (1 / self.odds) * 100 if self.odds > 0 else 0

# =============================================
# üîß FUN√á√ÉO INIT_STATE CORRIGIDA
# =============================================

def init_state():
    """Inicializa o estado da aplica√ß√£o"""
    if 'app_state' not in st.session_state:
        default_odds = {
            "Mais 1.5 & Ambas N√£o": 3.50,
            "Resultado 0x0": 7.89,
            "Menos 2.5 & Dupla Chance 1X": 1.85,
            "Dupla Chance X2": 1.91,
            "Pr√≥ximo Gol Favorito": 1.91,
            "Mais 1.5 Gols": 1.30,
            "Mais 2.5 & Dupla Chance 12": 2.30,
            "Menos 1.5 Gols": 3.25,
            "Vit√≥ria Favorito": 1.80
        }

        default_investments = {
            "Mais 1.5 & Ambas N√£o": 1.00,
            "Resultado 0x0": 0.00,
            "Menos 2.5 & Dupla Chance 1X": 2.00,
            "Dupla Chance X2": 2.00,
            "Pr√≥ximo Gol Favorito": 0.00,
            "Mais 1.5 Gols": 0.00,
            "Mais 2.5 & Dupla Chance 12": 1.50,
            "Menos 1.5 Gols": 1.00,
            "Vit√≥ria Favorito": 1.00
        }
        
        initial_bankroll = sum(default_investments.values())
        
        st.session_state.app_state = {
            'odds_values': default_odds,
            'investment_values': default_investments,
            'total_bankroll': initial_bankroll,
            'investment_proportions': {},
            'last_analysis': {},
            'user_profile': 'Moderado',
            'show_odds_analysis': True,
            'distribution_applied': False,
            'vitorias_favorito': 3,
            'gols_feitos_favorito': 8,
            'gols_sofridos_favorito': 3,
            'vitorias_azarao': 1,
            'gols_feitos_azarao': 4,
            'gols_sofridos_azarao': 10
        }
        update_proportions_from_investments()
    
    # Inicializar m√≥dulo de hedge se dispon√≠vel
    try:
        from dinamico import init_hedge_state
        if 'hedge_manager' not in st.session_state:
            init_hedge_state()
    except ImportError:
        st.warning("M√≥dulo dinamico n√£o dispon√≠vel")

def update_proportions_from_investments():
    """Atualiza propor√ß√µes baseadas nos investimentos atuais"""
    total_investment = sum(st.session_state.app_state['investment_values'].values())
    
    if total_investment > 0:
        proportions = {}
        for bet_type in BetType:
            investment = st.session_state.app_state['investment_values'][bet_type.value]
            proportions[bet_type.value] = investment / total_investment
        st.session_state.app_state['investment_proportions'] = proportions

def update_investments_from_proportions():
    """Atualiza investimentos baseados nas propor√ß√µes"""
    total_bankroll = st.session_state.app_state['total_bankroll']
    proportions = st.session_state.app_state.get('investment_proportions', {})
    
    for bet_type in BetType:
        proportion = proportions.get(bet_type.value, 0)
        st.session_state.app_state['investment_values'][bet_type.value] = total_bankroll * proportion

# =============================================
# ü§ñ SISTEMA DE PROMPT INTELIGENTE (RESTAURADO)
# =============================================

def render_intelligent_recommendations():
    """Sistema de recomenda√ß√µes inteligentes com prompt avan√ßado"""
    st.markdown("## ü§ñ Assistente de An√°lise com IA")
    
    # Coletar informa√ß√µes contextuais
    st.subheader("üìã Contexto da Partida")
    
    col1, col2 = st.columns(2)
    
    with col1:
        liga = st.selectbox("Liga/Campeonato", 
                           ["Brasileir√£o S√©rie A", "Brasileir√£o S√©rie B", "Copa do Brasil", 
                            "Libertadores", "Premier League", "La Liga", "Outro"])
        
        importancia = st.select_slider("Import√¢ncia da Partida",
                                      options=["Baixa", "M√©dia", "Alta", "Decisiva"])
    
    with col2:
        condicoes = st.multiselect("Condi√ß√µes Especiais",
                                  ["Chuva forte", "Calor extremo", "Gramado ruim", 
                                   "P√∫blico reduzido", "Sem torcida", "Outras"])
        
        motivacao_fav = st.select_slider("Motiva√ß√£o do Favorito",
                                        options=["Baixa", "M√©dia", "Alta", "M√°xima"])
    
    # Estat√≠sticas detalhadas
    st.subheader("üìä Estat√≠sticas dos Times")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üèÜ Favorito (Casa)**")
        vit_fav = st.slider("Vit√≥rias √∫ltimos 5 jogos", 0, 5, 
                           st.session_state.app_state.get('vitorias_favorito', 3), key="vit_fav")
        gols_fav_f = st.slider("Gols marcados √∫ltimos 5", 0, 20, 
                              st.session_state.app_state.get('gols_feitos_favorito', 8), key="gols_fav_f")
        gols_fav_s = st.slider("Gols sofridos √∫ltimos 5", 0, 15, 
                              st.session_state.app_state.get('gols_sofridos_favorito', 3), key="gols_fav_s")
    
    with col2:
        st.markdown("**‚öΩ Azar√£o (Fora)**")
        vit_aza = st.slider("Vit√≥rias √∫ltimos 5 jogos", 0, 5, 
                           st.session_state.app_state.get('vitorias_azarao', 1), key="vit_aza")
        gols_aza_f = st.slider("Gols marcados √∫ltimos 5", 0, 15, 
                              st.session_state.app_state.get('gols_feitos_azarao', 4), key="gols_aza_f")
        gols_aza_s = st.slider("Gols sofridos √∫ltimos 5", 0, 20, 
                              st.session_state.app_state.get('gols_sofridos_azarao', 10), key="gols_aza_s")
    
    # An√°lise t√©cnica
    st.subheader("üß† An√°lise T√©cnica")
    
    col1, col2 = st.columns(2)
    
    with col1:
        estilo_jogo = st.selectbox("Estilo de Jogo do Favorito",
                                  ["Ofensivo", "Equilibrado", "Defensivo", "Contra-ataque"])
        
        pressao = st.select_slider("Press√£o sobre o Favorito",
                                  ["Nenhuma", "Baixa", "M√©dia", "Alta", "Extrema"])
    
    with col2:
        consistencia = st.select_slider("Consist√™ncia do Azar√£o",
                                       ["Muito Irregular", "Irregular", "Regular", "Consistente"])
        
        historico_confronto = st.selectbox("Hist√≥rico de Confrontos",
                                          ["Favorito domina", "Equilibrado", "Azar√£o surpreende"])
    
    # Informa√ß√µes adicionais
    st.subheader("üí° Informa√ß√µes Adicionais")
    
    info_extra = st.text_area("Observa√ß√µes, not√≠cias, les√µes, ou fatores relevantes:",
                             placeholder="""Ex: Jogador-chave lesionado, treinador novo, situa√ß√£o do elenco...
                             
O Racing Club e o V√©lez Sarsfield revelar√£o o primeiro semifinalista da Copa Libertadores 2025 quando se enfrentarem em Avellaneda no jogo de volta das quartas de final.

Not√≠cias sobre a partida e a fase atual O Racing Club tem a vantagem no confronto depois de garantir uma vit√≥ria por 1 a 0 no jogo de ida em Liniers na √∫ltima ter√ßa-feira. Essa vit√≥ria fez parte de uma s√©rie de tr√™s vit√≥rias consecutivas da "Academia", que tamb√©m vem de uma vit√≥ria fora de casa por 2 a 0 sobre o Hurac√°n na √∫ltima rodada do Torneio Clausura 2025. Talvez a parte mais impressionante dessa sequ√™ncia seja o fato de o Racing n√£o ter sofrido gols em cada uma das tr√™s vit√≥rias, e conseguir essa fa√ßanha novamente seria suficiente para a equipe ficar entre os quatro primeiros na principal competi√ß√£o de clubes da Am√©rica do Sul.

O V√©lez Sarsfield se recuperou da derrota para o Racing no jogo de ida com uma vit√≥ria fora de casa por 2 a 1 sobre o San Martin de San Juan. Essa vit√≥ria ampliou a boa fase da equipe de Liniers, que perdeu apenas dois dos seus √∫ltimos 10 jogos em todas as competi√ß√µes (V6, E2, D2). At√© mesmo o desempenho do V√©lez fora de casa tem sido positivo, j√° que o time est√° h√° quatro jogos sem perder no territ√≥rio do advers√°rio (V2, E2), mantendo tr√™s partidas sem sofrer gols nesse per√≠odo. Mostrar essa solidez defensiva ser√° fundamental para se manter vivo nesse confronto.""",
                             height=200)
    
    # Gerar prompt inteligente
    if st.button("üß† Gerar An√°lise Completa", type="primary", use_container_width=True):
        with st.spinner("Analisando dados e criando relat√≥rio inteligente..."):
            prompt = generate_intelligent_prompt(
                liga, importancia, condicoes, motivacao_fav,
                vit_fav, gols_fav_f, gols_fav_s, vit_aza, gols_aza_f, gols_aza_s,
                estilo_jogo, pressao, consistencia, historico_confronto, info_extra
            )
            
            st.session_state['generated_prompt'] = prompt
    
    # Exibir prompt gerado
    if 'generated_prompt' in st.session_state:
        st.markdown("---")
        st.subheader("üéØ Relat√≥rio de An√°lise Gerado")
        
        with st.expander("üìã Visualizar An√°lise Completa", expanded=True):
            st.markdown(st.session_state['generated_prompt'])
        
        # Op√ß√µes de exporta√ß√£o
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìã Copiar para √Årea de Transfer√™ncia", use_container_width=True):
                st.toast("An√°lise copiada com sucesso! ‚úÖ")
        with col2:
            if st.button("üíæ Salvar como Relat√≥rio", use_container_width=True):
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"analise_apostas_{timestamp}.txt"
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(st.session_state['generated_prompt'])
                st.success(f"Relat√≥rio salvo como {filename}")

def generate_intelligent_prompt(liga, importancia, condicoes, motivacao_fav,
                              vit_fav, gols_fav_f, gols_fav_s, vit_aza, gols_aza_f, gols_aza_s,
                              estilo_jogo, pressao, consistencia, historico_confronto, info_extra):
    """Gera um prompt de an√°lise extremamente detalhado e inteligente"""
    
    # An√°lise autom√°tica baseada nas estat√≠sticas
    performance_fav = (vit_fav / 5) * 100
    performance_aza = (vit_aza / 5) * 100
    media_gols_fav = gols_fav_f / 5
    media_gols_aza = gols_aza_f / 5
    saldo_fav = (gols_fav_f - gols_fav_s) / 5
    saldo_aza = (gols_aza_f - gols_aza_s) / 5
    
    # Determinar cen√°rio principal
    if performance_fav >= 80 and saldo_fav > 1.0:
        cenario_principal = "Vit√≥ria convincente do favorito √© o cen√°rio mais prov√°vel"
        confianca = "Alta"
    elif performance_fav >= 60 and saldo_aza < -0.5:
        cenario_principal = "Favorito deve vencer, mas azar√£o pode marcar"
        confianca = "Moderada"
    else:
        cenario_principal = "Jogo equilibrado com incerteza no resultado"
        confianca = "Baixa"
    
    # Obter dados atuais
    odds = st.session_state.app_state['odds_values']
    investments = st.session_state.app_state['investment_values']
    bankroll = st.session_state.app_state['total_bankroll']
    
    prompt = f"""
# üéØ RELAT√ìRIO DE AN√ÅLISE DE APOSTAS - SISTEMA INTELIGENTE

## üìÖ CONTEXTO DA PARTIDA
- **Liga/Campeonato:** {liga}
- **Import√¢ncia:** {importancia}
- **Condi√ß√µes Especiais:** {', '.join(condicoes) if condicoes else 'Nenhuma'}
- **Motiva√ß√£o do Favorito:** {motivacao_fav}

## üìä AN√ÅLISE ESTAT√çSTICA AUTOM√ÅTICA

### üèÜ PERFORMANCE RECENTE
| Time | Vit√≥rias/5 | Aproveitamento | Gols Marcados (m√©dia) | Gols Sofridos (m√©dia) | Saldo |
|:---|:---:|:---:|:---:|:---:|:---:|
| Favorito | {vit_fav}/5 | {performance_fav:.0f}% | {media_gols_fav:.1f} | {gols_fav_s/5:.1f} | {saldo_fav:+.1f} |
| Azar√£o | {vit_aza}/5 | {performance_aza:.0f}% | {media_gols_aza:.1f} | {gols_aza_s/5:.1f} | {saldo_aza:+.1f} |

### üß† AN√ÅLISE T√âCNICA
- **Cen√°rio Mais Prov√°vel:** {cenario_principal} (Confian√ßa: {confianca})
- **Estilo do Favorito:** {estilo_jogo}
- **Press√£o sobre Favorito:** {pressao}
- **Consist√™ncia do Azar√£o:** {consistencia}
- **Hist√≥rico de Confrontos:** {historico_confronto}

## üí∞ SITUA√á√ÉO ATUAL DAS APOSTAS

### üìà DISTRIBUI√á√ÉO DE INVESTIMENTOS
| Mercado | Odds | Investimento | % Bankroll | Retorno Potencial |
|:---|:---:|:---:|:---:|:---:|
"""
    
    # Adicionar linhas da tabela
    total_investido = 0
    for bet_type in BetType:
        nome = bet_type.value
        odd = odds.get(nome, 1.0)
        invest = investments.get(nome, 0.0)
        percentual = (invest / bankroll * 100) if bankroll > 0 else 0
        retorno = invest * odd
        total_investido += invest
        
        prompt += f"| {nome} | {odd:.2f} | R$ {invest:.2f} | {percentual:.1f}% | R$ {retorno:.2f} |\n"
    
    prompt += f"""
**Total Investido:** R$ {total_investido:.2f} ({total_investido/bankroll*100:.1f}% do bankroll)

## üéØ SOLICITA√á√ÉO DE AN√ÅLISE ESPEC√çFICA

Baseado nas estat√≠sticas acima e na distribui√ß√£o atual, por favor forne√ßa:

### 1. üìä AN√ÅLISE DE VALOR
- Quais mercados apresentam melhor rela√ß√£o risco-retorno?
- Identifique oportunidades de value bet
- Pontos de sobrevaloriza√ß√£o/subvaloriza√ß√£o

### 2. ‚öñÔ∏è OTIMIZA√á√ÉO DE DISTRIBUI√á√ÉO
- Distribui√ß√£o ideal considerando perfil de risco
- Ajustes recomendados nos investimentos
- Estrat√©gia de hedge natural

### 3. üõ°Ô∏è GEST√ÉO DE RISCO
- Principais riscos identificados
- Cen√°rios cr√≠ticos e prote√ß√µes
- Limites de exposi√ß√£o recomendados

### 4. üìà ESTRAT√âGIA RECOMENDADA
- Abordagem ideal para esta partida
- Sequ√™ncia de a√ß√µes recomendada
- Pontos de aten√ß√£o durante o jogo

## üí° INFORMA√á√ïES ADICIONAIS
{info_extra if info_extra else "Nenhuma informa√ß√£o adicional fornecida."}

**Por favor, seja detalhado, data-driven e forne√ßa justificativas claras para cada recomenda√ß√£o.**
"""
    
    return prompt

# =============================================
# üéØ SISTEMA DE AN√ÅLISE DE VALOR APRIMORADO
# =============================================

class ValueBetAnalyzer:
    def __init__(self):
        self.analysis_results = {}
        
    def calcular_probabilidades_reais_otimizadas(self, estatisticas: Dict) -> Dict:
        """C√°lculo otimizado baseado nas estat√≠sticas reais"""
        vit_fav = estatisticas.get('vitorias_favorito', 3)
        gols_fav_f = estatisticas.get('gols_feitos_favorito', 8)
        gols_fav_s = estatisticas.get('gols_sofridos_favorito', 3)
        vit_aza = estatisticas.get('vitorias_azarao', 1)
        gols_aza_f = estatisticas.get('gols_feitos_azarao', 4)
        gols_aza_s = estatisticas.get('gols_sofridos_azarao', 10)
        
        # üî• C√ÅLCULOS OTIMIZADOS BASEADOS NA AN√ÅLISE ESTAT√çSTICA
        prob_vitoria_favorito = min(75, max(25, (vit_fav/5) * 100 * 0.65 + (gols_fav_f/5) * 12))
        prob_empate = min(35, max(15, 100 - prob_vitoria_favorito - (vit_aza/5) * 100 * 0.45))
        prob_vitoria_azarao = max(10, 100 - prob_vitoria_favorito - prob_empate)
        
        # Probabilidades derivadas com base real√≠stica
        prob_menos_25_gols = min(75, max(25, 60 - (gols_fav_f/5 + gols_aza_f/5) * 6))
        prob_mais_15_gols = 100 - prob_menos_25_gols
        prob_ambas_marcam = min(55, max(15, (gols_fav_f/10 + gols_aza_f/10) * 25))
        
        return {
            "prob_vitoria_favorito": prob_vitoria_favorito,
            "prob_empate": prob_empate,
            "prob_vitoria_azarao": prob_vitoria_azarao,
            "prob_empate_ou_vitoria_azarao": prob_empate + prob_vitoria_azarao,
            "prob_menos_25_gols_empate_ou_vitoria_favorito": prob_menos_25_gols * (prob_vitoria_favorito + prob_empate) / 100,
            "prob_mais_15_ambas_nao": prob_mais_15_gols * (100 - prob_ambas_marcam) / 100,
            "prob_0x0": max(3, (100 - prob_mais_15_gols) * 0.4),
            "prob_menos_15_gols": max(8, prob_menos_25_gols * 0.7),
            "prob_mais_25_gols_sem_empate": prob_mais_15_gols * (100 - prob_empate) / 100,
            "prob_proximo_gol_favorito": prob_vitoria_favorito * 0.6 + prob_empate * 0.3
        }
    
    def analisar_valor_apostas(self, investments: Dict, odds: Dict, estatisticas: Dict) -> Dict:
        """An√°lise completa de valor das apostas"""
        prob_reais = self.calcular_probabilidades_reais_otimizadas(estatisticas)
        
        mapping_probabilidades = {
            "Vit√≥ria Favorito": "prob_vitoria_favorito",
            "Dupla Chance X2": "prob_empate_ou_vitoria_azarao", 
            "Menos 2.5 & Dupla Chance 1X": "prob_menos_25_gols_empate_ou_vitoria_favorito",
            "Mais 1.5 & Ambas N√£o": "prob_mais_15_ambas_nao",
            "Resultado 0x0": "prob_0x0",
            "Menos 1.5 Gols": "prob_menos_15_gols",
            "Mais 2.5 & Dupla Chance 12": "prob_mais_25_gols_sem_empate",
            "Pr√≥ximo Gol Favorito": "prob_proximo_gol_favorito"
        }
        
        analise_detalhada = {}
        total_ev = 0
        total_investido = 0
        
        for mercado, investimento in investments.items():
            if investimento > 0:
                odd = odds.get(mercado, 1.0)
                prob_chave = mapping_probabilidades.get(mercado)
                prob_real = prob_reais.get(prob_chave, 50) if prob_chave else 50
                
                # üî• C√ÅLCULOS DE VALOR OTIMIZADOS
                prob_impl√≠cita = (1 / odd) * 100
                valor_aposta = ((prob_real - prob_impl√≠cita) / prob_impl√≠cita) * 100
                
                # Expected Value (EV)
                ev = (prob_real/100 * odd * investimento) - investimento
                total_ev += ev
                total_investido += investimento
                
                # ROI Esperado
                roi_esperado = (ev / investimento * 100) if investimento > 0 else 0
                
                analise_detalhada[mercado] = {
                    'investimento': investimento,
                    'odds': odd,
                    'probabilidade_real': prob_real,
                    'probabilidade_impl√≠cita': prob_impl√≠cita,
                    'valor_aposta': valor_aposta,
                    'ev': ev,
                    'roi_esperado': roi_esperado,
                    'status_valor': '‚úÖ ALTO VALOR' if valor_aposta > 10 else 
                                   '‚úÖ VALOR' if valor_aposta > 5 else 
                                   '‚ö†Ô∏è NEUTRO' if valor_aposta >= -5 else '‚ùå SEM VALOR',
                    'recomendacao': 'AUMENTAR' if valor_aposta > 5 else 
                                   'MANTER' if valor_aposta >= -2 else 'REDUZIR'
                }
        
        # üî• AN√ÅLISE DA CARTEIRA COMPLETA
        roi_total = (total_ev / total_investido * 100) if total_investido > 0 else 0
        margem_casa = 100 - sum([(1/odd)*100 for odd in odds.values() if odd > 0])
        
        self.analysis_results = {
            'detalhes': analise_detalhada,
            'resumo': {
                'total_investido': total_investido,
                'ev_total': total_ev,
                'roi_esperado_total': roi_total,
                'margem_casa': margem_casa,
                'numero_apostas': len([inv for inv in investments.values() if inv > 0]),
                'apostas_lucrativas': sum(1 for aposta in analise_detalhada.values() if aposta['ev'] > 0)
            }
        }
        
        return self.analysis_results

# =============================================
# üìä SISTEMA DE PLANOS DE INVESTIMENTO
# =============================================

class InvestmentPlanner:
    def __init__(self):
        self.plans = {}
    
    def gerar_planos_otimizados(self, analysis: Dict, bankroll: float) -> Dict:
        """Gera os 3 planos otimizados (Conservador, Balanceado, Agressivo)"""
        
        detalhes = analysis.get('detalhes', {})
        total_atual = analysis.get('resumo', {}).get('total_investido', bankroll)
        
        # üî• PLANO CONSERVADOR (Minimiza varia√ß√£o)
        plano_conservador = self._gerar_plano_conservador(detalhes, bankroll)
        
        # üî• PLANO BALANCEADO (Recomendado)
        plano_balanceado = self._gerar_plano_balanceado(detalhes, bankroll)
        
        # üî• PLANO AGRESSIVO (Maximiza EV)
        plano_agressivo = self._gerar_plano_agressivo(detalhes, bankroll)
        
        self.plans = {
            'conservador': self._calcular_metricas_plano(plano_conservador, detalhes, bankroll),
            'balanceado': self._calcular_metricas_plano(plano_balanceado, detalhes, bankroll),
            'agressivo': self._calcular_metricas_plano(plano_agressivo, detalhes, bankroll),
            'atual': self._calcular_metricas_plano({mercado: det['investimento'] for mercado, det in detalhes.items()}, detalhes, bankroll)
        }
        
        return self.plans
    
    def _gerar_plano_conservador(self, detalhes: Dict, bankroll: float) -> Dict:
        """Plano conservador - foco em redu√ß√£o de vari√¢ncia"""
        plan = {}
        total_alocado = 0
        
        for mercado, dados in detalhes.items():
            if dados['valor_aposta'] > 5:  # Apenas value bets s√≥lidos
                alocacao = min(bankroll * 0.15, dados['investimento'] * 1.2)
                plan[mercado] = alocacao
                total_alocado += alocacao
        
        # Distribuir o restante de forma conservadora
        if total_alocado < bankroll * 0.6:
            remaining = bankroll * 0.6 - total_alocado
            for mercado, dados in detalhes.items():
                if dados['valor_aposta'] > 0 and mercado not in plan:
                    plan[mercado] = remaining * 0.3
                    break
        
        return plan
    
    def _gerar_plano_balanceado(self, detalhes: Dict, bankroll: float) -> Dict:
        """Plano balanceado - equil√≠brio entre risco e retorno"""
        plan = {}
        total_alocado = 0
        
        for mercado, dados in detalhes.items():
            if dados['valor_aposta'] > 3:  # Value bets moderados
                # Aloca√ß√£o proporcional ao valor
                peso = max(0.1, dados['valor_aposta'] / 20)
                alocacao = bankroll * peso * 0.8
                plan[mercado] = alocacao
                total_alocado += alocacao
        
        # Garantir utiliza√ß√£o m√≠nima do bankroll
        if total_alocado < bankroll * 0.7:
            factor = (bankroll * 0.7) / total_alocado if total_alocado > 0 else 1
            for mercado in plan:
                plan[mercado] *= factor
        
        return plan
    
    def _gerar_plano_agressivo(self, detalhes: Dict, bankroll: float) -> Dict:
        """Plano agressivo - maximiza√ß√£o do EV"""
        plan = {}
        
        # Ordenar por valor da aposta (melhores oportunidades primeiro)
        mercados_ordenados = sorted(detalhes.items(), key=lambda x: x[1]['valor_aposta'], reverse=True)
        
        for i, (mercado, dados) in enumerate(mercados_ordenados):
            if dados['valor_aposta'] > 0:
                # Aloca√ß√£o decrescente baseada no ranking de valor
                peso = max(0.15, 0.3 - (i * 0.05))
                plan[mercado] = bankroll * peso
        
        return plan
    
    def _calcular_metricas_plano(self, plan: Dict, detalhes: Dict, bankroll: float) -> Dict:
        """Calcula m√©tricas detalhadas para cada plano"""
        total_investido = sum(plan.values())
        ev_total = 0
        var_total = 0
        
        for mercado, investimento in plan.items():
            if mercado in detalhes:
                dados = detalhes[mercado]
                ev_aposta = (dados['probabilidade_real']/100 * dados['odds'] * investimento) - investimento
                ev_total += ev_aposta
                
                # Vari√¢ncia simplificada
                var_aposta = (investimento ** 2) * (dados['odds'] - 1) ** 2 * \
                            (dados['probabilidade_real']/100) * (1 - dados['probabilidade_real']/100)
                var_total += var_aposta
        
        sd = np.sqrt(var_total)  # Desvio padr√£o
        roi_esperado = (ev_total / total_investido * 100) if total_investido > 0 else 0
        
        # Probabilidade de lucro (aproxima√ß√£o normal)
        z_score = ev_total / sd if sd > 0 else 0
        prob_lucro = self._calcular_probabilidade_lucro(z_score)
        
        return {
            'alocacoes': plan,
            'metricas': {
                'total_investido': total_investido,
                'ev_total': ev_total,
                'roi_esperado': roi_esperado,
                'desvio_padrao': sd,
                'probabilidade_lucro': prob_lucro,
                'utilizacao_bankroll': (total_investido / bankroll * 100) if bankroll > 0 else 0
            }
        }
    
    def _calcular_probabilidade_lucro(self, z_score: float) -> float:
        """Calcula probabilidade de lucro usando aproxima√ß√£o normal"""
        try:
            from scipy.stats import norm
            return norm.cdf(z_score) * 100
        except:
            # Fallback simples se scipy n√£o estiver dispon√≠vel
            if z_score >= 1.0: return 84.0
            elif z_score >= 0.5: return 69.0
            elif z_score >= 0.0: return 50.0
            elif z_score >= -0.5: return 31.0
            else: return 16.0

# =============================================
# üéØ AN√ÅLISE DE CEN√ÅRIOS (FUN√á√ÉO EXISTENTE)
# =============================================

class BettingStrategyAnalyzer:
    def __init__(self):
        self.bets: Dict[BetType, Bet] = {}
        
    def update_bet(self, bet_type: BetType, investment: float, odds: float):
        self.bets[bet_type] = Bet(bet_type, investment, odds)

    def get_total_investment(self) -> float:
        return sum(bet.investment for bet in self.bets.values())
        
    def calculate_scenario_profit(self, home_goals: int, away_goals: int, first_goal_by_fav: bool = None) -> Dict[str, any]:
        total_goals = home_goals + away_goals
        both_scored = home_goals > 0 and away_goals > 0
        total_investment_all = self.get_total_investment()
        total_return = 0.0
        winning_bets = []
        
        for bet_type, bet in self.bets.items():
            wins = False
            if bet_type == BetType.OVER_15_BOTH_NO:
                wins = (total_goals > 1.5) and not both_scored
            elif bet_type == BetType.EXACT_0_0:
                wins = (home_goals == 0 and away_goals == 0)
            elif bet_type == BetType.UNDER_25_DC_1X:
                wins = (total_goals < 2.5) and (home_goals >= away_goals)
            elif bet_type == BetType.DOUBLE_CHANCE_X2:
                wins = (home_goals == away_goals) or (away_goals > home_goals)
            elif bet_type == BetType.NEXT_GOAL_FAV and first_goal_by_fav is not None:
                wins = first_goal_by_fav
            elif bet_type == BetType.OVER_15:
                wins = total_goals > 1.5
            elif bet_type == BetType.OVER_25_DC_12:
                wins = (total_goals > 2.5) and (home_goals != away_goals)
            elif bet_type == BetType.UNDER_15:
                wins = (total_goals < 1.5)
            elif bet_type == BetType.VITORIA_FAV:
                wins = home_goals > away_goals
            
            if wins:
                total_return += bet.potential_return
                winning_bets.append(bet_type.value)
        
        profit = total_return - total_investment_all
        
        return {
            'Retorno Total': total_return,
            'Investimento Total': total_investment_all,
            'Lucro/Preju√≠zo': profit,
            'Apostas Vencedoras': winning_bets,
            'Status': '‚úÖ Lucro' if profit > 0 else '‚ùå Preju√≠zo' if profit < 0 else '‚öñÔ∏è Equil√≠brio',
            'ROI': (profit / total_investment_all * 100) if total_investment_all > 0 else 0
        }

def get_analyzer() -> BettingStrategyAnalyzer:
    analyzer = BettingStrategyAnalyzer()
    for bet_type in BetType:
        analyzer.update_bet(
            bet_type,
            st.session_state.app_state['investment_values'][bet_type.value],
            st.session_state.app_state['odds_values'][bet_type.value]
        )
    return analyzer

# =============================================
# üéØ IMPLEMENTA√á√ÉO DAS MELHORIAS SUGERIDAS
# =============================================
def sync_global_state():
    """SINCRONIZA√á√ÉO GLOBAL - ORDEM MESTRA PARA TODOS OS COMPONENTES"""
    # üî• FOR√áAR SINCRONIZA√á√ÉO DO BANKROLL PRIMEIRO
    sync_bankroll_values()
    
    # üî• ATUALIZAR AN√ÅLISE DE VALOR
    st.session_state.app_state['last_analysis'] = {
        'total_invested': st.session_state.app_state['total_invested'],
        'total_bankroll': st.session_state.app_state['total_bankroll'],
        'timestamp': datetime.now().isoformat(),
        'sync_type': 'GLOBAL_COMMAND'
    }
    
    # üî• MARCAR QUE DISTRIBUI√á√ÉO FOI APLICADA
    st.session_state.app_state['distribution_applied'] = True
    st.session_state.app_state['global_sync_time'] = datetime.now().isoformat()

def render_analise_avancada_value_bets():
    """Renderiza a an√°lise avan√ßada de value bets"""
    st.header("üî• An√°lise de Valor Avan√ßada")
    
    # Coletar dados atuais
    investments = st.session_state.app_state['investment_values']
    odds = st.session_state.app_state['odds_values']
    bankroll = st.session_state.app_state['total_bankroll']
    
    # Estat√≠sticas para c√°lculo
    estatisticas = {
        'vitorias_favorito': st.session_state.app_state.get('vitorias_favorito', 3),
        'gols_feitos_favorito': st.session_state.app_state.get('gols_feitos_favorito', 8),
        'gols_sofridos_favorito': st.session_state.app_state.get('gols_sofridos_favorito', 3),
        'vitorias_azarao': st.session_state.app_state.get('vitorias_azarao', 1),
        'gols_feitos_azarao': st.session_state.app_state.get('gols_feitos_azarao', 4),
        'gols_sofridos_azarao': st.session_state.app_state.get('gols_sofridos_azarao', 10)
    }
    
    # An√°lise de valor
    analyzer = ValueBetAnalyzer()
    analysis = analyzer.analisar_valor_apostas(investments, odds, estatisticas)
    
    # Gerar planos otimizados
    planner = InvestmentPlanner()
    plans = planner.gerar_planos_otimizados(analysis, bankroll)
    
    # üî• RESUMO EXECUTIVO
    st.subheader("üìä Resumo Executivo - An√°lise de Valor")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        ev_atual = plans['atual']['metricas']['ev_total']
        st.metric("EV Atual", f"R$ {ev_atual:.2f}", 
                 delta=f"{plans['atual']['metricas']['roi_esperado']:.1f}%")
    
    with col2:
        prob_lucro_atual = plans['atual']['metricas']['probabilidade_lucro']
        st.metric("Prob. Lucro Atual", f"{prob_lucro_atual:.1f}%")
    
    with col3:
        margem_casa = analysis['resumo']['margem_casa']
        st.metric("Margem da Casa", f"{margem_casa:.1f}%")
    
    with col4:
        apostas_lucrativas = analysis['resumo']['apostas_lucrativas']
        st.metric("Apostas +EV", f"{apostas_lucrativas}/{analysis['resumo']['numero_apostas']}")
    
    # üî• COMPARA√á√ÉO ENTRE PLANOS
    st.subheader("üìà Compara√ß√£o de Estrat√©gias")
    
    plan_data = []
    for plano_nome, plano_dados in plans.items():
        if plano_nome != 'atual':
            metricas = plano_dados['metricas']
            plan_data.append({
                'Plano': plano_nome.upper(),
                'EV (R$)': metricas['ev_total'],
                'ROI Esperado (%)': metricas['roi_esperado'],
                'Prob. Lucro (%)': metricas['probabilidade_lucro'],
                'Utiliza√ß√£o Bankroll (%)': metricas['utilizacao_bankroll'],
                'Risco (SD)': metricas['desvio_padrao']
            })
    
    if plan_data:
        df_comparacao = pd.DataFrame(plan_data)
        
        # Gr√°fico de compara√ß√£o
        fig = px.bar(df_comparacao, x='Plano', y=['EV (R$)', 'ROI Esperado (%)', 'Prob. Lucro (%)'],
                    title="Compara√ß√£o de Performance entre Planos", barmode='group')
        st.plotly_chart(fig, use_container_width=True, key="comparacao_planos")
        
        # Tabela detalhada
        st.dataframe(df_comparacao.style.format({
            'EV (R$)': 'R$ {:.2f}',
            'ROI Esperado (%)': '{:.1f}%',
            'Prob. Lucro (%)': '{:.1f}%',
            'Utiliza√ß√£o Bankroll (%)': '{:.1f}%',
            'Risco (SD)': 'R$ {:.2f}'
        }), use_container_width=True, key="tabela_comparacao_planos")
    
    # üî• RECOMENDA√á√ïES ESPEC√çFICAS
    st.subheader("üéØ Recomenda√ß√µes de A√ß√£o Imediata")
    
    detalhes_analise = analysis['detalhes']
    
    # Ordenar por valor de aposta (melhores oportunidades primeiro)
    oportunidades_ordenadas = sorted(detalhes_analise.items(), 
                                   key=lambda x: x[1]['valor_aposta'], reverse=True)
    
    for i, (mercado, dados) in enumerate(oportunidades_ordenadas[:3]):  # Top 3 oportunidades
        with st.expander(f"{i+1}. {mercado} - {dados['status_valor']}", expanded=i==0):
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Valor da Aposta", f"{dados['valor_aposta']:.1f}%")
            with col2:
                st.metric("Prob. Real", f"{dados['probabilidade_real']:.1f}%")
            with col3:
                st.metric("Prob. Impl√≠cita", f"{dados['probabilidade_impl√≠cita']:.1f}%")
            with col4:
                st.metric("EV Esperado", f"R$ {dados['ev']:.2f}")
            
            st.write(f"**Recomenda√ß√£o:** {dados['recomendacao']}")
            
            # Bot√£o de a√ß√£o r√°pida
            if dados['recomendacao'] == 'AUMENTAR':
                novo_investimento = dados['investimento'] * 1.5
                if st.button(f"üîº Aumentar posi√ß√£o em {mercado}", key=f"aumentar_{mercado}_{i}"):
                    st.session_state.app_state['investment_values'][mercado] = novo_investimento
                    st.success(f"Posi√ß√£o aumentada para R$ {novo_investimento:.2f}")
                    st.rerun()
            elif dados['recomendacao'] == 'REDUZIR':
                novo_investimento = dados['investimento'] * 0.5
                if st.button(f"üîΩ Reduzir posi√ß√£o em {mercado}", key=f"reduzir_{mercado}_{i}"):
                    st.session_state.app_state['investment_values'][mercado] = novo_investimento
                    st.success(f"Posi√ß√£o reduzida para R$ {novo_investimento:.2f}")
                    st.rerun()
    
    # üî• APLICAR PLANO AUTOMATICAMENTE
    st.subheader("‚ö° Aplica√ß√£o R√°pida de Planos")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üõ°Ô∏è Aplicar Plano Conservador", use_container_width=True, key="apl_conservador"):
            aplicar_plano(plans['conservador']['alocacoes'])
            st.success("Plano Conservador aplicado!")
    
    with col2:
        if st.button("‚öñÔ∏è Aplicar Plano Balanceado", use_container_width=True, key="apl_balanceado"):
            aplicar_plano(plans['balanceado']['alocacoes'])
            st.success("Plano Balanceado aplicado!")
    
    with col3:
        if st.button("üöÄ Aplicar Plano Agressivo", use_container_width=True, key="apl_agressivo"):
            aplicar_plano(plans['agressivo']['alocacoes'])
            st.success("Plano Agressivo aplicado!")

def aplicar_plano(alocacoes: Dict):
    """Aplica um plano de aloca√ß√£o automaticamente"""
    for mercado, investimento in alocacoes.items():
        st.session_state.app_state['investment_values'][mercado] = investimento
    
    # Atualizar totais
    total_investido = sum(st.session_state.app_state['investment_values'].values())
    st.session_state.app_state['total_bankroll'] = total_investido
    update_proportions_from_investments()
    st.rerun()

def sync_bankroll_values():
    """Sincroniza todos os valores de bankroll e investimento - VERS√ÉO SUPER-ROBUSTA"""
    app_state = st.session_state.app_state
    
    # üî• CALCULAR TOTAL INVESTIDO DIRETO DOS VALORES
    total_invested = sum(app_state['investment_values'].values())
    
    # üî• GARANTIR que os valores est√£o consistentes
    app_state['total_invested'] = total_invested
    
    # üî• SE bankroll for MENOR que o investido, ATUALIZAR bankroll
    if app_state['total_bankroll'] < total_invested:
        app_state['total_bankroll'] = total_invested
    
    # üî• SE bankroll for MUITO MAIOR, manter mas garantir m√≠nimo
    if app_state['total_bankroll'] > total_invested * 2:
        # Bankroll pode ser maior, mas n√£o absurdamente maior
        app_state['total_bankroll'] = max(app_state['total_bankroll'], total_invested)
    
    # üî• ATUALIZAR propor√ß√µes
    update_proportions_from_investments()
    
    # üî• LOG PARA VERIFICAR (opcional)
    app_state['last_sync'] = {
        'total_invested': total_invested,
        'total_bankroll': app_state['total_bankroll'],
        'timestamp': datetime.now().isoformat()
    }

# =============================================
# üîß FUN√á√ïES EXISTENTES DO SISTEMA ORIGINAL
# =============================================

def render_controls():
    """Configura√ß√£o inteligente - VERS√ÉO SIMPLIFICADA SEM ABA PROBLEM√ÅTICA"""
    
    # üî• INDICADOR DE STATUS GLOBAL
    if st.session_state.app_state.get('distribution_applied'):
        st.success("‚úÖ **SISTEMA SINCRONIZADO** - Todas as abas mostram valores consistentes")
    else:
        st.warning("‚ö†Ô∏è **CLIQUE EM 'DISTRIBUI√á√ÉO AUTOM√ÅTICA' PARA SINCRONIZAR**")
        
    sync_bankroll_values()  # CORRE√á√ÉO GARANTIDA
    
    st.subheader("‚öôÔ∏è Configura√ß√£o Inteligente de Apostas")
    
    # üî• REMOVER A ABA PROBLEM√ÅTICA - MANTER APENAS ODDS E RECOMENDA√á√ïES
    tab1, tab2 = st.tabs(["üéØ Odds e Investimentos", "üí° Recomenda√ß√µes"])
    
    with tab1:
        col1, col2, col3 = st.columns([2, 2, 1.2])
        
        with col1:
            st.markdown("**üìà Configura√ß√£o de Odds**")
            for i, bet_type in enumerate(BetType):
                current_odds = st.session_state.app_state['odds_values'][bet_type.value]
                new_odds = st.number_input(
                    f"{bet_type.value}",
                    min_value=1.01,
                    value=float(current_odds),
                    step=0.01,
                    key=f"odds_{bet_type.name}_{i}",
                    label_visibility="visible"
                )
                if new_odds != current_odds:
                    st.session_state.app_state['odds_values'][bet_type.value] = float(new_odds)
                    st.rerun()

        with col2:
            st.markdown("**üí∞ Controle de Investimentos**")
            for i, bet_type in enumerate(BetType):
                current_investment = st.session_state.app_state['investment_values'][bet_type.value]
                new_investment = st.number_input(
                    f"{bet_type.value} - R$",
                    min_value=0.0,
                    max_value=100.0,
                    value=float(current_investment),
                    step=0.10,
                    key=f"inv_{bet_type.name}_{i}",
                    label_visibility="visible"
                )
                if new_investment != current_investment:
                    st.session_state.app_state['investment_values'][bet_type.value] = float(new_investment)
                    
                    # üî• MARCAR QUE PRECISA DE SINCRONIZA√á√ÉO
                    st.session_state.app_state['distribution_applied'] = False
                    st.session_state.app_state['needs_sync'] = True
                    
                    st.rerun()

        with col3:
            st.markdown("**üè¶ Gerenciamento do Banco**")
            current_bankroll = st.session_state.app_state['total_bankroll']
            new_bankroll = st.number_input(
                "Total do Bankroll (R$)",
                min_value=0.0,
                max_value=1000.0,
                value=float(current_bankroll),
                step=1.0,
                key="total_bankroll_input_unique"
            )
            if new_bankroll != current_bankroll:
                st.session_state.app_state['total_bankroll'] = new_bankroll
                update_investments_from_proportions()
                st.rerun()

            # üî• BOT√ÉO DE SINCRONIZA√á√ÉO SIMPLIFICADO
            if st.button("üîÑ Distribui√ß√£o Autom√°tica", 
                        use_container_width=True, 
                        type="primary",
                        key="dist_auto_simple"):
                
                # üéØ EXECUTAR SINCRONIZA√á√ÉO
                sync_global_state()
                
                st.success(f"‚úÖ Sistema sincronizado! Bankroll: R$ {st.session_state.app_state['total_bankroll']:.2f}")
                st.rerun()

    with tab2:
        # MANTER APENAS AS RECOMENDA√á√ïES INTELIGENTES
        render_intelligent_recommendations()

def render_detailed_scenario_analysis():
    """Renderiza an√°lise detalhada de cen√°rios com tabelas completas"""
    st.subheader("üìà An√°lise Avan√ßada de Cen√°rios - DETALHADA")
    
    analyzer = get_analyzer()
    total_investment = analyzer.get_total_investment()
    
    # Cen√°rios importantes para an√°lise
    important_scenarios = [
        ('0x0', 0, 0, None, "Empate sem gols"),
        ('1x0 FAV', 1, 0, True, "Vit√≥ria do favorito 1x0"),
        ('0x1 AZA', 0, 1, False, "Vit√≥ria do azar√£o 0x1"),
        ('1x1 FAV 1¬∫', 1, 1, True, "Empate 1x1 com gol do favorito primeiro"),
        ('1x1 AZA 1¬∫', 1, 1, False, "Empate 1x1 com gol do azar√£o primeiro"),
        ('2x0 FAV', 2, 0, True, "Vit√≥ria convincente do favorito"),
        ('0x2 AZA', 0, 2, False, "Vit√≥ria convincente do azar√£o"),
        ('2x1 FAV', 2, 1, True, "Vit√≥ria do favorito com gol do azar√£o"),
        ('1x2 AZA', 1, 2, False, "Vit√≥ria do azar√£o com gol do favorito"),
        ('2x2', 2, 2, None, "Empate com muitos gols"),
        ('3x0 FAV', 3, 0, True, "Goleada do favorito"),
        ('0x3 AZA', 0, 3, False, "Goleada do azar√£o")
    ]
    
    # Dados para gr√°ficos
    all_scenario_data = []
    scenario_profits = {}
    detailed_scenarios = []
    
    for scenario_name, home_goals, away_goals, first_goal, description in important_scenarios:
        result = analyzer.calculate_scenario_profit(home_goals, away_goals, first_goal)
        
        # Dados para gr√°ficos
        scenario_data = {
            'Cen√°rio': scenario_name,
            'Placar': f"{home_goals}x{away_goals}",
            'Lucro/Preju√≠zo': result['Lucro/Preju√≠zo'],
            'ROI': result['ROI'],
            'Status': result['Status']
        }
        all_scenario_data.append(scenario_data)
        scenario_profits[scenario_name] = result['Lucro/Preju√≠zo']
        
        # Dados detalhados para tabela
        detailed_scenario = {
            'Cen√°rio': scenario_name,
            'Descri√ß√£o': description,
            'Placar': f"{home_goals}x{away_goals}",
            'Investimento Total': f"R$ {result['Investimento Total']:.2f}",
            'Retorno Total': f"R$ {result['Retorno Total']:.2f}",
            'Lucro/Preju√≠zo': f"R$ {result['Lucro/Preju√≠zo']:.2f}",
            'ROI': f"{result['ROI']:.1f}%",
            'Status': result['Status'],
            'Apostas Vencedoras': ', '.join(result['Apostas Vencedoras']) if result['Apostas Vencedoras'] else 'Nenhuma',
            # Vers√µes num√©ricas para ordena√ß√£o
            'Lucro_Num': result['Lucro/Preju√≠zo'],
            'ROI_Num': result['ROI'],
            'Investimento_Num': result['Investimento Total']
        }
        detailed_scenarios.append(detailed_scenario)
    
    df_all = pd.DataFrame(all_scenario_data)
    df_detailed = pd.DataFrame(detailed_scenarios)
    
    # M√©tricas principais
    profitable_scenarios = len([s for s in detailed_scenarios if s['Status'] == '‚úÖ Lucro'])
    neutral_scenarios = len([s for s in detailed_scenarios if s['Status'] == '‚öñÔ∏è Equil√≠brio'])
    losing_scenarios = len([s for s in detailed_scenarios if s['Status'] == '‚ùå Preju√≠zo'])
    
    # üî• GR√ÅFICOS EXISTENTES
    col1, col2 = st.columns(2)
    with col1:
        fig_profit = px.bar(df_all, x='Cen√°rio', y='Lucro/Preju√≠zo', color='Status',
                           title='Lucro/Preju√≠zo por Cen√°rio (R$)',
                           color_discrete_map={'‚úÖ Lucro': '#00FF00', '‚ùå Preju√≠zo': '#FF0000', '‚öñÔ∏è Equil√≠brio': '#FFFF00'})
        fig_profit.update_layout(showlegend=True)
        st.plotly_chart(fig_profit, use_container_width=True, key="grafico_lucro_cenarios")
    
    with col2:
        fig_roi = px.bar(df_all, x='Cen√°rio', y='ROI', color='ROI',
                        title='ROI por Cen√°rio (%)',
                        color_continuous_scale='RdYlGn')
        st.plotly_chart(fig_roi, use_container_width=True, key="grafico_roi_cenarios")
    
    # üî• TABELA DETALHADA COM AN√ÅLISE POR EXTENSO
    st.markdown("### üìã AN√ÅLISE DETALHADA POR CEN√ÅRIO")
    
    # Filtros para a tabela
    col1, col2, col3 = st.columns(3)
    with col1:
        filter_status = st.selectbox("Filtrar por Status:", 
                                   ["Todos", "‚úÖ Lucro", "‚ùå Preju√≠zo", "‚öñÔ∏è Equil√≠brio"])
    with col2:
        sort_by = st.selectbox("Ordenar por:", 
                              ["Cen√°rio", "Lucro/Preju√≠zo", "ROI", "Investimento Total"])
    with col3:
        show_details = st.checkbox("Mostrar an√°lise detalhada", value=True)
    
    # Aplicar filtros
    filtered_df = df_detailed.copy()
    if filter_status != "Todos":
        filtered_df = filtered_df[filtered_df['Status'] == filter_status]
    
    # Ordenar usando as colunas num√©ricas
    sort_mapping = {
        "Cen√°rio": "Cen√°rio",
        "Lucro/Preju√≠zo": "Lucro_Num",
        "ROI": "ROI_Num", 
        "Investimento Total": "Investimento_Num"
    }
    
    if sort_by in sort_mapping:
        sort_column = sort_mapping[sort_by]
        ascending = sort_by != "Lucro/Preju√≠zo"  # Ordenar Lucro/Preju√≠zo em ordem decrescente
        filtered_df = filtered_df.sort_values(sort_column, ascending=ascending)
    
    # Exibir tabela detalhada (apenas colunas de exibi√ß√£o)
    display_columns = ['Cen√°rio', 'Descri√ß√£o', 'Placar', 'Investimento Total', 
                      'Retorno Total', 'Lucro/Preju√≠zo', 'ROI', 'Status', 'Apostas Vencedoras']
    
    st.dataframe(
        filtered_df[display_columns],
        use_container_width=True,
        height=400
    )

    return scenario_profits

def render_dinamico_integration():
    """Renderiza a integra√ß√£o com o m√≥dulo dinamico"""
    st.header("üõ°Ô∏è Hedge Din√¢mico com IA")
    
    try:
        from dinamico import render_hedge_controls, render_hedge_results
        
        analyzer = get_analyzer()
        
        zero_result = analyzer.calculate_scenario_profit(0, 0, None)
        fav_result = analyzer.calculate_scenario_profit(1, 1, True)
        aza_result = analyzer.calculate_scenario_profit(1, 1, False)
        
        zero_profit = zero_result['Lucro/Preju√≠zo']
        fav_profit = fav_result['Lucro/Preju√≠zo']
        aza_profit = aza_result['Lucro/Preju√≠zo']
        
        odds_values = st.session_state.app_state['odds_values']
        
        render_hedge_controls(zero_profit, fav_profit, aza_profit, odds_values)
        
        if st.session_state.get('hedge_applied', False):
            render_hedge_results()
            
    except ImportError as e:
        st.error(f"‚ùå M√≥dulo dinamico n√£o dispon√≠vel: {e}")
        st.info("""
        ### üìã Para habilitar o Hedge Din√¢mico:
        1. Certifique-se de que o arquivo `dinamico.py` est√° na mesma pasta
        2. Reinicie a aplica√ß√£o
        3. O sistema de hedge inteligente ser√° carregado automaticamente
        """)

# =============================================
# üöÄ FUN√á√ÉO PRINCIPAL CORRIGIDA
# =============================================

def main_optimized():
    """Fun√ß√£o principal otimizada"""
    st.set_page_config(
        page_title="Analisador de Apostas - Vers√£o Otimizada",
        page_icon="üî•",
        layout="wide"
    )
    
    st.title("üéØ Analisador Inteligente - AN√ÅLISE DE VALOR OTIMIZADA")
    st.markdown("### üî• Implementando as recomenda√ß√µes estat√≠sticas para maximizar EV")
    
    init_state()
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "üî• An√°lise de Valor", 
        "‚öôÔ∏è Configura√ß√£o", 
        "üìà Cen√°rios", 
        "üõ°Ô∏è Hedge Din√¢mico"
    ])
    
    with tab1:
        render_analise_avancada_value_bets()
    
    with tab2:
        render_controls()
    
    with tab3:
        # Substituir a fun√ß√£o antiga pela nova detalhada
        render_detailed_scenario_analysis()
    
    with tab4:
        render_dinamico_integration()

# =============================================
# üöÄ EXECU√á√ÉO PRINCIPAL
# =============================================

if __name__ == "__main__":
    main_optimized()
